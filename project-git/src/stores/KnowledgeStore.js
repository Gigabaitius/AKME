// src/stores/KnowledgeStore.js
/**
 * üìö –•—Ä–∞–Ω–∏–ª–∏—â–µ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
 * @description –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å—è–º–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è GPT
 */
import BaseStore from './BaseStore.js';

class KnowledgeStore extends BaseStore {
  constructor() {
    super('knowledge');
    this.categories = new Set();
    this.loadCategories();
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π –∏–∑ localStorage
   */
  loadCategories() {
    try {
      const stored = localStorage.getItem('hr-assistant-knowledge-categories');
      if (stored) {
        this.categories = new Set(JSON.parse(stored));
      } else {
        // –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        this.categories = new Set([
          '–û–±—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã',
          '–î–æ–∫—É–º–µ–Ω—Ç—ã',
          '–ü—Ä–æ—Ü–µ—Å—Å—ã',
          '–ü—Ä–æ–µ–∫—Ç—ã',
          '–ö–æ–Ω—Ç–∞–∫—Ç—ã',
          '–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏',
          'FAQ',
          '–®–∞–±–ª–æ–Ω—ã –æ—Ç–≤–µ—Ç–æ–≤'
        ]);
        this.saveCategories();
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–π', error);
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  saveCategories() {
    try {
      localStorage.setItem(
        'hr-assistant-knowledge-categories', 
        JSON.stringify(Array.from(this.categories))
      );
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
   * @param {Object} knowledge - –î–∞–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
   */
  async create(knowledge) {
    const item = {
      ...knowledge,
      id: this.generateId(),
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString(),
      version: 1,
      views: 0,
      helpful: 0,
      notHelpful: 0
    };

    // –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if (item.category && !this.categories.has(item.category)) {
      this.categories.add(item.category);
      this.saveCategories();
    }

    return super.create(item);
  }

  /**
   * –ü–æ–∏—Å–∫ –ø–æ –±–∞–∑–µ –∑–Ω–∞–Ω–∏–π
   * @param {string} query - –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
   * @returns {Promise<Array>} –ù–∞–π–¥–µ–Ω–Ω—ã–µ –∑–∞–ø–∏—Å–∏
   */
  async search(query) {
    if (!query || query.trim().length < 2) {
      return [];
    }

    const allItems = await this.getAll();
    const searchTerm = query.toLowerCase().trim();
    
    // –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É, —Å–æ–¥–µ—Ä–∂–∏–º–æ–º—É –∏ —Ç–µ–≥–∞–º
    const results = allItems.filter(item => {
      const titleMatch = item.title?.toLowerCase().includes(searchTerm);
      const contentMatch = item.content?.toLowerCase().includes(searchTerm);
      const tagsMatch = item.tags?.some(tag => 
        tag.toLowerCase().includes(searchTerm)
      );
      const categoryMatch = item.category?.toLowerCase().includes(searchTerm);
      
      return titleMatch || contentMatch || tagsMatch || categoryMatch;
    });

    // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏ (–ø—Ä–æ—Å—Ç–∞—è –≤–µ—Ä—Å–∏—è)
    return results.sort((a, b) => {
      // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç —Ç–æ—á–Ω–æ–º—É —Å–æ–≤–ø–∞–¥–µ–Ω–∏—é –≤ –∑–∞–≥–æ–ª–æ–≤–∫–µ
      const aExactTitle = a.title?.toLowerCase() === searchTerm;
      const bExactTitle = b.title?.toLowerCase() === searchTerm;
      if (aExactTitle && !bExactTitle) return -1;
      if (!aExactTitle && bExactTitle) return 1;
      
      // –ó–∞—Ç–µ–º –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
      return (b.views || 0) - (a.views || 0);
    });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–ø–∏—Å–µ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @param {string} category - –ö–∞—Ç–µ–≥–æ—Ä–∏—è
   * @returns {Promise<Array>} –ó–∞–ø–∏—Å–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  async getByCategory(category) {
    return this.getAll({ category });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
   * @returns {Promise<Array>} –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –∑–∞–ø–∏—Å–∏
   */
  async getPopular(limit = 10) {
    const items = await this.getAll();
    return items
      .sort((a, b) => (b.views || 0) - (a.views || 0))
      .slice(0, limit);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–ø–∏—Å–µ–π
   * @param {number} limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π
   * @returns {Promise<Array>} –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø–∏—Å–∏
   */
  async getRecent(limit = 10) {
    const items = await this.getAll();
    return items
      .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
      .slice(0, limit);
  }

  /**
   * –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤
   * @param {string} id - ID –∑–∞–ø–∏—Å–∏
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
   */
  async incrementViews(id) {
    const item = await this.getById(id);
    if (item) {
      return this.update(id, { views: (item.views || 0) + 1 });
    }
    return null;
  }

  /**
   * –ì–æ–ª–æ—Å–æ–≤–∞–Ω–∏–µ –∑–∞ –ø–æ–ª–µ–∑–Ω–æ—Å—Ç—å
   * @param {string} id - ID –∑–∞–ø–∏—Å–∏
   * @param {boolean} isHelpful - –ü–æ–ª–µ–∑–Ω–æ –∏–ª–∏ –Ω–µ—Ç
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –∑–∞–ø–∏—Å—å
   */
  async vote(id, isHelpful) {
    const item = await this.getById(id);
    if (item) {
      const updates = isHelpful
        ? { helpful: (item.helpful || 0) + 1 }
        : { notHelpful: (item.notHelpful || 0) + 1 };
      return this.update(id, updates);
    }
    return null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   * @returns {Array<string>} –ú–∞—Å—Å–∏–≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
   */
  getCategories() {
    return Array.from(this.categories).sort();
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @param {string} category - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  addCategory(category) {
    if (category && !this.categories.has(category)) {
      this.categories.add(category);
      this.saveCategories();
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   * @param {string} category - –ù–∞–∑–≤–∞–Ω–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
   */
  removeCategory(category) {
    this.categories.delete(category);
    this.saveCategories();
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getStatistics() {
    const items = await this.getAll();
    
    const categoryCounts = {};
    items.forEach(item => {
      const cat = item.category || '–ë–µ–∑ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏';
      categoryCounts[cat] = (categoryCounts[cat] || 0) + 1;
    });

    return {
      total: items.length,
      categories: this.categories.size,
      totalViews: items.reduce((sum, item) => sum + (item.views || 0), 0),
      avgRating: items.length > 0 
        ? items.reduce((sum, item) => {
            const total = (item.helpful || 0) + (item.notHelpful || 0);
            const rating = total > 0 ? (item.helpful || 0) / total : 0;
            return sum + rating;
          }, 0) / items.length 
        : 0,
      categoryCounts,
      recentlyAdded: items.filter(item => {
        const dayAgo = new Date();
        dayAgo.setDate(dayAgo.getDate() - 1);
        return new Date(item.createdAt) > dayAgo;
      }).length
    };
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
   */
  async export() {
    const items = await this.getAll();
    const categories = this.getCategories();
    
    return {
      version: '1.0',
      exportDate: new Date().toISOString(),
      categories,
      items: items.map(item => ({
        ...item,
        // –ò—Å–∫–ª—é—á–∞–µ–º —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –ø–æ–ª—è
        id: undefined,
        updatedAt: undefined,
        views: undefined,
        helpful: undefined,
        notHelpful: undefined
      }))
    };
  }

  /**
   * –ò–º–ø–æ—Ä—Ç –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –∏–º–ø–æ—Ä—Ç–∞
   */
  async import(data) {
    try {
      let imported = 0;
      let skipped = 0;

      // –ò–º–ø–æ—Ä—Ç –∫–∞—Ç–µ–≥–æ—Ä–∏–π
      if (data.categories && Array.isArray(data.categories)) {
        data.categories.forEach(cat => this.addCategory(cat));
      }

      // –ò–º–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–µ–π
      if (data.items && Array.isArray(data.items)) {
        for (const item of data.items) {
          // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—É–±–ª–∏–∫–∞—Ç—ã –ø–æ –∑–∞–≥–æ–ª–æ–≤–∫—É
          const existing = await this.getAll({ title: item.title });
          if (existing.length === 0) {
            await this.create(item);
            imported++;
          } else {
            skipped++;
          }
        }
      }

      return { imported, skipped, total: imported + skipped };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π', error);
      throw error;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export default new KnowledgeStore();
