// src/stores/ShiftWorkerStore.js
/**
 * üèóÔ∏è –•—Ä–∞–Ω–∏–ª–∏—â–µ –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤
 * @description –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã–º–∏ –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫
 */
import BaseStore from './BaseStore.js';
import ShiftWorkerModel from '../models/ShiftWorkerModel.js';

class ShiftWorkerStore extends BaseStore {
  constructor() {
    super('shiftWorkers');
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∞—Ö—Ç–æ–≤–∏–∫–∞
   * @param {Object} workerData - –î–∞–Ω–Ω—ã–µ –≤–∞—Ö—Ç–æ–≤–∏–∫–∞
   * @returns {Promise<ShiftWorkerModel>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∞—Ö—Ç–æ–≤–∏–∫
   */
  async create(workerData) {
    const worker = new ShiftWorkerModel(workerData);
    const created = await super.create(worker.toJSON());
    return new ShiftWorkerModel(created);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ö—Ç–æ–≤–∏–∫–∞ –ø–æ Chat ID
   * @param {string} chatId - ID —á–∞—Ç–∞
   * @returns {Promise<ShiftWorkerModel|null>} –í–∞—Ö—Ç–æ–≤–∏–∫ –∏–ª–∏ null
   */
  async getByChatId(chatId) {
    const workers = await this.getAll();
    const worker = workers.find(w => w.chatId === chatId);
    return worker ? new ShiftWorkerModel(worker) : null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤ –ø–æ –æ–±—ä–µ–∫—Ç—É
   * @param {string} object - –ù–∞–∑–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞
   * @returns {Promise<Array<ShiftWorkerModel>>} –ú–∞—Å—Å–∏–≤ –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤
   */
  async getByObject(object) {
    const workers = await this.getAll({ object });
    return workers.map(w => new ShiftWorkerModel(w));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤ —Å –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–º–∏ –ö–¢
   * @returns {Promise<Array<ShiftWorkerModel>>} –ú–∞—Å—Å–∏–≤ –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤
   */
  async getOverdueCheckpoints() {
    const workers = await this.getAll();
    const now = new Date();
    const deadlineTime = new Date();
    deadlineTime.setHours(15, 0, 0, 0); // 15:00 –ú–°–ö

    return workers
      .filter(w => {
        if (!w.checkpointDate || w.checkpointStatus !== '–û–∂–∏–¥–∞–Ω–∏–µ') {
          return false;
        }
        
        const checkpointDate = new Date(w.checkpointDate);
        return checkpointDate.toDateString() === now.toDateString() && 
               now > deadlineTime && 
               !w.checkpointResponse;
      })
      .map(w => new ShiftWorkerModel(w));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ –≤–∞—Ö—Ç–æ–≤–∏–∫–∞–º
   * @returns {Promise<Object>} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getStatistics() {
    const workers = await this.getAll();
    const now = new Date();
    const today = now.toDateString();

    return {
      total: workers.length,
      active: workers.filter(w => w.status === '–ê–∫—Ç–∏–≤–µ–Ω').length,
      onShift: workers.filter(w => w.status === '–ù–∞ –≤–∞—Ö—Ç–µ').length,
      onLeave: workers.filter(w => w.status === '–í –æ—Ç–ø—É—Å–∫–µ').length,
      todayCheckpoints: workers.filter(w => {
        if (!w.checkpointDate) return false;
        return new Date(w.checkpointDate).toDateString() === today;
      }).length,
      overdueCheckpoints: workers.filter(w => {
        if (!w.checkpointDate || w.checkpointStatus !== '–û–∂–∏–¥–∞–Ω–∏–µ') {
          return false;
        }
        const checkpointDate = new Date(w.checkpointDate);
        const deadlineTime = new Date();
        deadlineTime.setHours(15, 0, 0, 0);
        return checkpointDate < now && now > deadlineTime && !w.checkpointResponse;
      }).length
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
   * @param {string} workerId - ID –≤–∞—Ö—Ç–æ–≤–∏–∫–∞
   * @param {Object} checkpointData - –î–∞–Ω–Ω—ã–µ –ö–¢
   * @returns {Promise<ShiftWorkerModel>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ö—Ç–æ–≤–∏–∫
   */
  async updateCheckpoint(workerId, checkpointData) {
    const worker = await this.getById(workerId);
    if (!worker) {
      throw new Error(`–í–∞—Ö—Ç–æ–≤–∏–∫ —Å ID ${workerId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    }

    const workerModel = new ShiftWorkerModel(worker);
    
    if (checkpointData.response) {
      workerModel.respondToCheckpoint(checkpointData.response);
    } else if (checkpointData.checkpoint && checkpointData.date) {
      workerModel.setCheckpoint(checkpointData.checkpoint, new Date(checkpointData.date));
    } else if (checkpointData.missed) {
      workerModel.missCheckpoint();
    }

    const updated = await this.update(workerId, workerModel.toJSON());
    return new ShiftWorkerModel(updated);
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫
   * @param {string} workerId - ID –≤–∞—Ö—Ç–æ–≤–∏–∫–∞
   * @returns {Promise<Array>} –ò—Å—Ç–æ—Ä–∏—è –ö–¢
   */
  async getCheckpointHistory(workerId) {
    // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ —ç—Ç–æ –¥–æ–ª–∂–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
    // –ü–æ–∫–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –º–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    return [
      {
        id: 1,
        workerId,
        checkpoint: '–ö–¢-1',
        date: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),
        status: '–û—Ç–≤–µ—Ç–∏–ª',
        response: '–í—Å–µ –≤ –ø–æ—Ä—è–¥–∫–µ',
        respondedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)
      },
      {
        id: 2,
        workerId,
        checkpoint: '–ö–¢-2',
        date: new Date(Date.now() - 3 * 24 * 60 * 60 * 1000),
        status: '–ü—Ä–æ–ø—É—â–µ–Ω–∞',
        response: null,
        respondedAt: null
      }
    ];
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export default new ShiftWorkerStore();
