// src/controllers/ShiftWorkerController.js
/**
 * üèóÔ∏è –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤
 * @description –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤–∞—Ö—Ç–æ–≤–∏–∫–∞–º–∏ –∏ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–º–∏ —Ç–æ—á–∫–∞–º–∏
 */
import BaseController from './BaseController.js';
import ShiftWorkerModel from '../models/ShiftWorkerModel.js';
import ShiftWorkerStore from '../stores/ShiftWorkerStore.js';
import WhatsAppService from '../services/WhatsAppService.js';
import NotificationService from '../services/NotificationService.js';

class ShiftWorkerController extends BaseController {
  constructor() {
    super();
    this.store = ShiftWorkerStore;
    this.whatsAppService = WhatsAppService;
    this.notificationService = NotificationService;
    
    this.initializeEventListeners();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
   */
  initializeEventListeners() {
    // –°–ª—É—à–∞–µ–º —Å–æ–±—ã—Ç–∏—è –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫
    this.eventBus.on('shiftWorkers:checkDeadlines', this.checkAllDeadlines.bind(this));
    this.eventBus.on('checkpoint:response', this.handleCheckpointResponse.bind(this));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤
   * @returns {Promise<Object>} –í–∞—Ö—Ç–æ–≤–∏–∫–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  async getAllShiftWorkers() {
    try {
      this.setLoading(true);
      const workers = await this.store.getAll();
      const stats = await this.store.getStatistics();
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –ö–¢ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ
      const workersWithStatus = workers.map(worker => {
        const model = new ShiftWorkerModel(worker);
        return {
          ...worker,
          isCheckpointOverdue: model.isCheckpointOverdue()
        };
      });
      
      this.eventBus.emit('shiftWorkers:loaded', { workers: workersWithStatus, stats });
      
      return { workers: workersWithStatus, stats };
    } catch (error) {
      this.handleError(error, 'getAllShiftWorkers');
      return { workers: [], stats: {} };
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –≤–∞—Ö—Ç–æ–≤–∏–∫–∞
   * @param {Object} workerData - –î–∞–Ω–Ω—ã–µ –≤–∞—Ö—Ç–æ–≤–∏–∫–∞
   * @returns {Promise<ShiftWorkerModel>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –≤–∞—Ö—Ç–æ–≤–∏–∫
   */
  async createShiftWorker(workerData) {
    try {
      this.setLoading(true);
      
      // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
      const worker = new ShiftWorkerModel(workerData);
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è
      worker.validate();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
      const created = await this.store.create(worker);
      
      this.eventBus.emit('shiftWorker:created', created);
      this.eventBus.emit('notification:success', `–í–∞—Ö—Ç–æ–≤–∏–∫ ${created.name} –¥–æ–±–∞–≤–ª–µ–Ω`);
      
      return created;
    } catch (error) {
      this.handleError(error, 'createShiftWorker');
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∞—Ö—Ç–æ–≤–∏–∫–∞
   * @param {string} workerId - ID –≤–∞—Ö—Ç–æ–≤–∏–∫–∞
   * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è
   * @returns {Promise<ShiftWorkerModel>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ö—Ç–æ–≤–∏–∫
   */
  async updateShiftWorker(workerId, updates) {
    try {
      this.setLoading(true);
      
      const existing = await this.store.getById(workerId);
      if (!existing) {
        throw new Error('–í–∞—Ö—Ç–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      // –°–æ–∑–¥–∞–µ–º –º–æ–¥–µ–ª—å —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
      const updated = new ShiftWorkerModel({ ...existing, ...updates });
      updated.validate();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º
      const result = await this.store.update(workerId, updated.toJSON());
      
      this.eventBus.emit('shiftWorker:updated', result);
      this.eventBus.emit('notification:success', '–î–∞–Ω–Ω—ã–µ –≤–∞—Ö—Ç–æ–≤–∏–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω—ã');
      
      return result;
    } catch (error) {
      this.handleError(error, 'updateShiftWorker');
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –≤–∞—Ö—Ç–æ–≤–∏–∫–∞
   * @param {string} workerId - ID –≤–∞—Ö—Ç–æ–≤–∏–∫–∞
   * @returns {Promise<boolean>} –£—Å–ø–µ—Ö –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async deleteShiftWorker(workerId) {
    try {
      this.setLoading(true);
      
      const success = await this.store.delete(workerId);
      
      if (success) {
        this.eventBus.emit('shiftWorker:deleted', workerId);
        this.eventBus.emit('notification:success', '–í–∞—Ö—Ç–æ–≤–∏–∫ —É–¥–∞–ª–µ–Ω');
      }
      
      return success;
    } catch (error) {
      this.handleError(error, 'deleteShiftWorker');
      return false;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–∏
   * @param {string} workerId - ID –≤–∞—Ö—Ç–æ–≤–∏–∫–∞
   * @param {string} checkpoint - –ù–∞–∑–≤–∞–Ω–∏–µ –ö–¢
   * @param {Date} date - –î–∞—Ç–∞ –ö–¢
   * @returns {Promise<ShiftWorkerModel>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –≤–∞—Ö—Ç–æ–≤–∏–∫
   */
  async setCheckpoint(workerId, checkpoint, date) {
    try {
      this.setLoading(true);
      
      const updated = await this.store.updateCheckpoint(workerId, {
        checkpoint,
        date
      });
      
      this.logger.info(`–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ö–¢ "${checkpoint}" –¥–ª—è –≤–∞—Ö—Ç–æ–≤–∏–∫–∞ ${updated.name}`);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–∞—Ö—Ç–æ–≤–∏–∫—É
      if (updated.chatId) {
        await this.sendCheckpointNotification(updated);
      }
      
      this.eventBus.emit('checkpoint:set', { workerId, checkpoint, date });
      this.eventBus.emit('notification:success', '–ö–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');
      
      return updated;
    } catch (error) {
      this.handleError(error, 'setCheckpoint');
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ö–¢
   * @param {ShiftWorkerModel} worker - –í–∞—Ö—Ç–æ–≤–∏–∫
   */
  async sendCheckpointNotification(worker) {
    try {
      const message = `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${worker.name}!

–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–∞—è —Ç–æ—á–∫–∞: ${worker.currentCheckpoint}
–î–∞—Ç–∞: ${new Date(worker.checkpointDate).toLocaleDateString('ru-RU')}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–µ –∑–∞–±—É–¥—å—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ö–¢ –¥–æ 15:00 –ú–°–ö.

–° —É–≤–∞–∂–µ–Ω–∏–µ–º,
–°–û`;

      await this.whatsAppService.sendMessage(worker.chatId, message);
      this.logger.info(`–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ö–¢ –≤–∞—Ö—Ç–æ–≤–∏–∫—É ${worker.name}`);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ö–¢', error);
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ö–¢
   * @param {string} workerId - ID –≤–∞—Ö—Ç–æ–≤–∏–∫–∞
   * @returns {Promise<boolean>} –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendCheckpointReminder(workerId) {
    try {
      this.setLoading(true);
      
      const worker = await this.store.getById(workerId);
      if (!worker || !worker.chatId) {
        throw new Error('–í–∞—Ö—Ç–æ–≤–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç Chat ID');
      }
      
      const message = `${worker.name}, –Ω–∞–ø–æ–º–∏–Ω–∞–µ–º –æ –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω–æ–π —Ç–æ—á–∫–µ "${worker.currentCheckpoint}"!

–û—Å—Ç–∞–ª–æ—Å—å –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞: ${this.getTimeUntilDeadline()}

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –ö–¢.`;

      const success = await this.whatsAppService.sendMessage(worker.chatId, message);
      
      if (success) {
        this.eventBus.emit('notification:success', '–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
      }
      
      return success;
    } catch (error) {
      this.handleError(error, 'sendCheckpointReminder');
      return false;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –ö–¢
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç–∞
   */
  async handleCheckpointResponse(data) {
    try {
      const { workerId, response } = data;
      
      const updated = await this.store.updateCheckpoint(workerId, { response });
      
      this.logger.info(`–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –Ω–∞ –ö–¢ –æ—Ç ${updated.name}: ${response}`);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –°–û
      this.notificationService.showSuccess(
        `${updated.name} –æ—Ç–≤–µ—Ç–∏–ª –Ω–∞ –ö–¢: ${response}`
      );
      
      this.eventBus.emit('checkpoint:responded', { workerId, response });
      
    } catch (error) {
      this.handleError(error, 'handleCheckpointResponse');
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö –¥–µ–¥–ª–∞–π–Ω–æ–≤ –ö–¢
   */
  async checkAllDeadlines() {
    try {
      const overdueWorkers = await this.store.getOverdueCheckpoints();
      
      for (const worker of overdueWorkers) {
        // –û—Ç–º–µ—á–∞–µ–º –ö–¢ –∫–∞–∫ –ø—Ä–æ–ø—É—â–µ–Ω–Ω—É—é
        await this.store.updateCheckpoint(worker.id, { missed: true });
        
        // –£–≤–µ–¥–æ–º–ª—è–µ–º –°–û
        this.notificationService.showMissedCheckpointNotification(worker);
        
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏–µ
        this.eventBus.emit('missedCheckpoint', { workerId: worker.id });
        
        this.logger.warn(`–ü—Ä–æ–ø—É—â–µ–Ω–∞ –ö–¢ –≤–∞—Ö—Ç–æ–≤–∏–∫–∞ ${worker.name}`);
      }
      
      if (overdueWorkers.length > 0) {
        this.eventBus.emit('notification:error', 
          `–ü—Ä–æ–ø—É—â–µ–Ω–æ ${overdueWorkers.length} –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã—Ö —Ç–æ—á–µ–∫!`
        );
      }
      
    } catch (error) {
      this.handleError(error, 'checkAllDeadlines');
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
   * @returns {string} –í—Ä–µ–º—è –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞
   */
  getTimeUntilDeadline() {
    const now = new Date();
    const deadline = new Date();
    deadline.setHours(15, 0, 0, 0); // 15:00 –ú–°–ö
    
    if (now > deadline) {
      return '–î–µ–¥–ª–∞–π–Ω –∏—Å—Ç–µ–∫';
    }
    
    const diff = deadline - now;
    const hours = Math.floor(diff / (1000 * 60 * 60));
    const minutes = Math.floor((diff % (1000 * 60 * 60)) / (1000 * 60));
    
    return `${hours} —á. ${minutes} –º–∏–Ω.`;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –ö–¢ –≤–∞—Ö—Ç–æ–≤–∏–∫–∞
   * @param {string} workerId - ID –≤–∞—Ö—Ç–æ–≤–∏–∫–∞
   * @returns {Promise<Array>} –ò—Å—Ç–æ—Ä–∏—è –ö–¢
   */
  async getCheckpointHistory(workerId) {
    try {
      const history = await this.store.getCheckpointHistory(workerId);
      return history;
    } catch (error) {
      this.handleError(error, 'getCheckpointHistory');
      return [];
    }
  }

  /**
   * –ú–∞—Å—Å–æ–≤–∞—è —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –ö–¢
   * @param {Array} workerIds - ID –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤
   * @param {string} checkpoint - –ù–∞–∑–≤–∞–Ω–∏–µ –ö–¢
   * @param {Date} date - –î–∞—Ç–∞ –ö–¢
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ–ø–µ—Ä–∞—Ü–∏–∏
   */
  async setBulkCheckpoints(workerIds, checkpoint, date) {
    try {
      this.setLoading(true);
      
      const results = {
        success: 0,
        failed: 0,
        errors: []
      };
      
      for (const workerId of workerIds) {
        try {
          await this.setCheckpoint(workerId, checkpoint, date);
          results.success++;
        } catch (error) {
          results.failed++;
          results.errors.push({
            workerId,
            error: error.message
          });
        }
      }
      
      this.eventBus.emit('notification:info', 
        `–£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ö–¢: ${results.success}, –æ—à–∏–±–æ–∫: ${results.failed}`
      );
      
      return results;
    } catch (error) {
      this.handleError(error, 'setBulkCheckpoints');
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤
   * @returns {Promise<string>} CSV –¥–∞–Ω–Ω—ã–µ
   */
  async exportToCSV() {
    try {
      const workers = await this.store.getAll();
      
      const headers = [
        'ID',
        '–§–ò–û',
        '–¢–µ–ª–µ—Ñ–æ–Ω',
        '–û–±—ä–µ–∫—Ç',
        '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
        '–°—Ç–∞—Ç—É—Å',
        '–¢–µ–∫—É—â–∞—è –ö–¢',
        '–î–∞—Ç–∞ –ö–¢',
        '–°—Ç–∞—Ç—É—Å –ö–¢',
        '–û—Ç–≤–µ—Ç –Ω–∞ –ö–¢',
        '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –°–û',
        '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è'
      ];
      
      const rows = workers.map(w => [
        w.id,
        w.name,
        w.phone,
        w.object,
        w.position || '',
        w.status,
        w.currentCheckpoint || '',
        w.checkpointDate ? new Date(w.checkpointDate).toLocaleDateString('ru-RU') : '',
        w.checkpointStatus || '',
        w.checkpointResponse || '',
        w.soComment || '',
        new Date(w.createdAt).toLocaleDateString('ru-RU')
      ]);
      
      const csvContent = [
        headers.join(','),
        ...rows.map(row => row.map(cell => `"${cell}"`).join(','))
      ].join('\n');
      
      return csvContent;
    } catch (error) {
      this.handleError(error, 'exportToCSV');
      return '';
    }
  }
}

export default ShiftWorkerController;
