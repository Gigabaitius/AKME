// src/controllers/MailingController.js
/**
 * üìß –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä —Ä–∞—Å—Å—ã–ª–æ–∫
 * @description –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Å—Å–æ–≤—ã–º–∏ —Ä–∞—Å—Å—ã–ª–∫–∞–º–∏ —á–µ—Ä–µ–∑ WhatsApp, SMS –∏ Telegram
 */
import BaseController from './BaseController.js';
import CandidateStore from '../stores/CandidateStore.js';
import ShiftWorkerStore from '../stores/ShiftWorkerStore.js';
import ExtensionAPIService from '../services/ExtensionAPIService.js';

class MailingController extends BaseController {
  constructor() {
    super();
    this.candidateStore = CandidateStore;
    this.shiftWorkerStore = ShiftWorkerStore;
    this.extensionAPI = ExtensionAPIService;
    this.mailingHistory = this.loadMailingHistory();
    
    this.initializeEventListeners();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
   */
  initializeEventListeners() {
    this.eventBus.on('mailing:send', this.sendMailing.bind(this));
    this.eventBus.on('mailing:schedule', this.scheduleMailing.bind(this));
  }

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
   * @returns {Array} –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫
   */
  loadMailingHistory() {
    try {
      const stored = localStorage.getItem('hr-assistant-mailing-history');
      return stored ? JSON.parse(stored) : [];
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫', error);
      return [];
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
   */
  saveMailingHistory() {
    try {
      localStorage.setItem('hr-assistant-mailing-history', JSON.stringify(this.mailingHistory));
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫', error);
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏
   * @param {Object} mailingData - –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
   * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
   */
  async createMailing(mailingData) {
    try {
      this.setLoading(true);
      
      const mailing = {
        id: this.generateId(),
        ...mailingData,
        status: 'draft',
        createdAt: new Date().toISOString(),
        updatedAt: new Date().toISOString(),
        sent: 0,
        failed: 0,
        total: 0
      };

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
      const recipients = await this.getRecipients(mailing);
      mailing.total = recipients.length;
      mailing.recipients = recipients;

      this.mailingHistory.push(mailing);
      this.saveMailingHistory();

      this.eventBus.emit('mailing:created', mailing);
      this.eventBus.emit('notification:success', '–†–∞—Å—Å—ã–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞');

      return mailing;
    } catch (error) {
      this.handleError(error, 'createMailing');
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π —Ä–∞—Å—Å—ã–ª–∫–∏
   * @param {Object} mailing - –î–∞–Ω–Ω—ã–µ —Ä–∞—Å—Å—ã–ª–∫–∏
   * @returns {Promise<Array>} –°–ø–∏—Å–æ–∫ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π
   */
  async getRecipients(mailing) {
    const recipients = [];
    
    try {
      // –ö–∞–Ω–¥–∏–¥–∞—Ç—ã
      if (mailing.targetGroups.includes('candidates')) {
        const candidates = await this.candidateStore.getAll();
        const filtered = this.filterByStatus(candidates, mailing.candidateStatuses);
        
        filtered.forEach(candidate => {
          if (candidate.chatId || candidate.phone) {
            recipients.push({
              id: candidate.id,
              name: candidate.name,
              type: 'candidate',
              chatId: candidate.chatId,
              phone: candidate.phone,
              project: candidate.project,
              status: candidate.status
            });
          }
        });
      }

      // –ú–æ–ª—á–∞—â–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
      if (mailing.targetGroups.includes('silent')) {
        const silentCandidates = await this.candidateStore.getSilentCandidates();
        
        silentCandidates.forEach(candidate => {
          if (candidate.phone && !recipients.find(r => r.id === candidate.id)) {
            recipients.push({
              id: candidate.id,
              name: candidate.name,
              type: 'silent',
              phone: candidate.phone,
              silentHours: this.calculateSilentHours(candidate.silentSince)
            });
          }
        });
      }

      // –í–∞—Ö—Ç–æ–≤–∏–∫–∏
      if (mailing.targetGroups.includes('shiftWorkers')) {
        const shiftWorkers = await this.shiftWorkerStore.getAll();
        
        shiftWorkers.forEach(worker => {
          if (worker.chatId || worker.phone) {
            recipients.push({
              id: worker.id,
              name: worker.name,
              type: 'shiftWorker',
              chatId: worker.chatId,
              phone: worker.phone,
              object: worker.object,
              status: worker.status
            });
          }
        });
      }

      // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ –ø—Ä–æ–µ–∫—Ç–∞–º
      if (mailing.projects && mailing.projects.length > 0) {
        return recipients.filter(r => 
          mailing.projects.includes(r.project) || 
          mailing.projects.includes(r.object)
        );
      }

      return recipients;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π', error);
      return recipients;
    }
  }

  /**
   * –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ø–æ —Å—Ç–∞—Ç—É—Å–∞–º
   * @param {Array} items - –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏
   * @param {Array} statuses - –†–∞–∑—Ä–µ—à–µ–Ω–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã
   * @returns {Array} –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
   */
  filterByStatus(items, statuses) {
    if (!statuses || statuses.length === 0) {
      return items;
    }
    return items.filter(item => statuses.includes(item.status));
  }

  /**
   * –†–∞—Å—á–µ—Ç —á–∞—Å–æ–≤ –º–æ–ª—á–∞–Ω–∏—è
   * @param {string} silentSince - –î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ –º–æ–ª—á–∞–Ω–∏—è
   * @returns {number} –ß–∞—Å—ã –º–æ–ª—á–∞–Ω–∏—è
   */
  calculateSilentHours(silentSince) {
    if (!silentSince) return 0;
    const now = new Date();
    const silentDate = new Date(silentSince);
    return Math.floor((now - silentDate) / (1000 * 60 * 60));
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
   * @param {string} mailingId - ID —Ä–∞—Å—Å—ã–ª–∫–∏
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendMailing(mailingId) {
    try {
      this.setLoading(true);
      
      const mailing = this.mailingHistory.find(m => m.id === mailingId);
      if (!mailing) {
        throw new Error('–†–∞—Å—Å—ã–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      if (mailing.status === 'sent') {
        throw new Error('–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞');
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
      mailing.status = 'sending';
      mailing.startedAt = new Date().toISOString();
      this.saveMailingHistory();

      const results = {
        sent: 0,
        failed: 0,
        errors: []
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
      for (const recipient of mailing.recipients) {
        try {
          const message = this.personalizeMessage(mailing.message, recipient);
          
          let success = false;
          
          // WhatsApp –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ
          if (recipient.chatId && mailing.channels.includes('whatsapp')) {
            success = await this.sendWhatsAppMessage(recipient.chatId, message);
          }
          // SMS –∫–∞–∫ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç
          else if (recipient.phone && mailing.channels.includes('sms')) {
            success = await this.sendSMS(recipient.phone, message);
          }
          // Telegram (–µ—Å–ª–∏ –µ—Å—Ç—å)
          else if (recipient.telegramId && mailing.channels.includes('telegram')) {
            success = await this.sendTelegramMessage(recipient.telegramId, message);
          }

          if (success) {
            results.sent++;
            mailing.sent++;
          } else {
            results.failed++;
            mailing.failed++;
            results.errors.push({
              recipient: recipient.name,
              error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ'
            });
          }

          // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
          await this.delay(1000);
          
          // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
          this.eventBus.emit('mailing:progress', {
            mailingId,
            sent: results.sent,
            failed: results.failed,
            total: mailing.recipients.length
          });

        } catch (error) {
          results.failed++;
          mailing.failed++;
          results.errors.push({
            recipient: recipient.name,
            error: error.message
          });
        }
      }

      // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—Å—Å—ã–ª–∫—É
      mailing.status = 'sent';
      mailing.completedAt = new Date().toISOString();
      this.saveMailingHistory();

      this.eventBus.emit('mailing:completed', { mailingId, results });
      this.eventBus.emit('notification:success', 
        `–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${results.sent}, –û—à–∏–±–æ–∫: ${results.failed}`
      );

      return results;

    } catch (error) {
      this.handleError(error, 'sendMailing');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –Ω–∞ –æ—à–∏–±–∫—É
      const mailing = this.mailingHistory.find(m => m.id === mailingId);
      if (mailing) {
        mailing.status = 'error';
        mailing.error = error.message;
        this.saveMailingHistory();
      }
      
      throw error;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} template - –®–∞–±–ª–æ–Ω —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {Object} recipient - –ü–æ–ª—É—á–∞—Ç–µ–ª—å
   * @returns {string} –ü–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  personalizeMessage(template, recipient) {
    let message = template;
    
    // –ó–∞–º–µ–Ω—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    message = message.replace(/\{name\}/g, recipient.name || '–ö–∞–Ω–¥–∏–¥–∞—Ç');
    message = message.replace(/\{project\}/g, recipient.project || recipient.object || '');
    message = message.replace(/\{status\}/g, recipient.status || '');
    
    // –î–æ–±–∞–≤–ª—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–ª—á–∞—â–∏—Ö
    if (recipient.type === 'silent' && recipient.silentHours) {
      const hours = recipient.silentHours;
      const days = Math.floor(hours / 24);
      const hoursText = days > 0 ? `${days} –¥–Ω–µ–π` : `${hours} —á–∞—Å–æ–≤`;
      message = message.replace(/\{silentTime\}/g, hoursText);
    }
    
    return message;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ WhatsApp —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} chatId - ID —á–∞—Ç–∞
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @returns {Promise<boolean>} –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendWhatsAppMessage(chatId, message) {
    try {
      const result = await this.extensionAPI.sendWhatsAppMessage(chatId, message);
      return result.success;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ WhatsApp', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ SMS
   * @param {string} phone - –¢–µ–ª–µ—Ñ–æ–Ω
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @returns {Promise<boolean>} –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendSMS(phone, message) {
    try {
      const result = await this.extensionAPI.sendSMS(phone, message);
      return result.success;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ SMS', error);
      return false;
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–∫–∞ Telegram —Å–æ–æ–±—â–µ–Ω–∏—è
   * @param {string} telegramId - ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
   * @param {string} message - –°–æ–æ–±—â–µ–Ω–∏–µ
   * @returns {Promise<boolean>} –£—Å–ø–µ—Ö –æ—Ç–ø—Ä–∞–≤–∫–∏
   */
  async sendTelegramMessage(telegramId, message) {
    try {
      const result = await this.extensionAPI.sendTelegramMessage(telegramId, message);
      return result.success;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ Telegram', error);
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
   * @returns {Array} –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—Å—ã–ª–æ–∫
   */
  getMailingHistory() {
    return this.mailingHistory.sort((a, b) => 
      new Date(b.createdAt) - new Date(a.createdAt)
    );
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞—Å—Å—ã–ª–æ–∫
   * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getMailingStatistics() {
    const total = this.mailingHistory.length;
    const sent = this.mailingHistory.filter(m => m.status === 'sent').length;
    const totalRecipients = this.mailingHistory.reduce((sum, m) => sum + (m.total || 0), 0);
    const totalSent = this.mailingHistory.reduce((sum, m) => sum + (m.sent || 0), 0);
    const totalFailed = this.mailingHistory.reduce((sum, m) => sum + (m.failed || 0), 0);
    
    return {
      total,
      sent,
      draft: total - sent,
      totalRecipients,
      totalSent,
      totalFailed,
      successRate: totalRecipients > 0 ? Math.round((totalSent / totalRecipients) * 100) : 0
    };
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
   * @param {string} mailingId - ID —Ä–∞—Å—Å—ã–ª–∫–∏
   * @returns {boolean} –£—Å–ø–µ—Ö —É–¥–∞–ª–µ–Ω–∏—è
   */
  deleteMailing(mailingId) {
    try {
      const index = this.mailingHistory.findIndex(m => m.id === mailingId);
      if (index !== -1) {
        this.mailingHistory.splice(index, 1);
        this.saveMailingHistory();
        this.eventBus.emit('mailing:deleted', mailingId);
        this.eventBus.emit('notification:success', '–†–∞—Å—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞');
        return true;
      }
      return false;
    } catch (error) {
      this.handleError(error, 'deleteMailing');
      return false;
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ID
   * @returns {string} –£–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
   */
  generateId() {
    return Date.now().toString(36) + Math.random().toString(36).substr(2);
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞
   * @param {number} ms - –ú–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
   * @returns {Promise} Promise –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è
   */
  delay(ms) {
    return new Promise(resolve => setTimeout(resolve, ms));
  }
}

export default MailingController;
