// src/controllers/AuthController.js
/**
 * üîê –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 * @description –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏
 */
import BaseController from './BaseController.js';
import ExtensionAPIService from '../services/ExtensionAPIService.js';

class AuthController extends BaseController {
  constructor() {
    super();
    this.extensionAPI = ExtensionAPIService;
    this.googleAuth = null;
    this.initializeEventListeners();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–ª—É—à–∞—Ç–µ–ª–µ–π —Å–æ–±—ã—Ç–∏–π
   */
  initializeEventListeners() {
    this.eventBus.on('auth:logout', this.logout.bind(this));
    this.eventBus.on('auth:checkStatus', this.checkAuthStatus.bind(this));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   * @returns {Promise<Object>} –°—Ç–∞—Ç—É—Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
   */
  async checkAuthStatus() {
    try {
      const status = {
        isAuthenticated: true, // –í MVP –≤–µ—Ä—Å–∏–∏ –≤—Å–µ–≥–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã
        googleSheetsConnected: false,
        whatsappConnected: false,
        telegramConnected: false,
        extensionConnected: false
      };

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      status.extensionConnected = await this.extensionAPI.isConnected();

      if (status.extensionConnected) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
        const integrations = await this.extensionAPI.getIntegrationStatus();
        status.googleSheetsConnected = integrations.googleSheets || false;
        status.whatsappConnected = integrations.whatsapp || false;
        status.telegramConnected = integrations.telegram || false;
      }

      this.eventBus.emit('auth:statusUpdated', status);
      return status;
    } catch (error) {
      this.handleError(error, 'checkAuthStatus');
      return {
        isAuthenticated: true,
        googleSheetsConnected: false,
        whatsappConnected: false,
        telegramConnected: false,
        extensionConnected: false
      };
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets
   * @returns {Promise<boolean>} –£—Å–ø–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async connectGoogleSheets() {
    try {
      this.setLoading(true);
      this.logger.info('–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Google Sheets...');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      if (!await this.extensionAPI.isConnected()) {
        throw new Error('–†–∞—Å—à–∏—Ä–µ–Ω–∏–µ HR Assistant –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ');
      }

      // –ó–∞–ø—É—Å–∫–∞–µ–º OAuth –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      const result = await this.extensionAPI.authenticateGoogleSheets();

      if (result.success) {
        this.googleAuth = result.auth;
        this.eventBus.emit('auth:googleSheetsConnected');
        this.eventBus.emit('notification:success', 'Google Sheets —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
        const settings = JSON.parse(localStorage.getItem('hr-assistant-settings') || '{}');
        settings.googleSheetsConnected = true;
        localStorage.setItem('hr-assistant-settings', JSON.stringify(settings));
        
        return true;
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      }
    } catch (error) {
      this.handleError(error, 'connectGoogleSheets');
      this.eventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Google Sheets');
      return false;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Google Sheets
   * @returns {Promise<boolean>} –£—Å–ø–µ—Ö –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
   */
  async disconnectGoogleSheets() {
    try {
      this.setLoading(true);
      
      // –û—Ç–∑—ã–≤–∞–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      await this.extensionAPI.revokeGoogleAuth();
      
      this.googleAuth = null;
      this.eventBus.emit('auth:googleSheetsDisconnected');
      this.eventBus.emit('notification:info', 'Google Sheets –æ—Ç–∫–ª—é—á–µ–Ω');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settings = JSON.parse(localStorage.getItem('hr-assistant-settings') || '{}');
      settings.googleSheetsConnected = false;
      localStorage.setItem('hr-assistant-settings', JSON.stringify(settings));
      
      return true;
    } catch (error) {
      this.handleError(error, 'disconnectGoogleSheets');
      return false;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Google Sheets
   * @returns {Promise<boolean>} –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async checkGoogleSheetsConnection() {
    try {
      if (!this.googleAuth) {
        const settings = JSON.parse(localStorage.getItem('hr-assistant-settings') || '{}');
        if (!settings.googleSheetsConnected) {
          return false;
        }
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      const status = await this.extensionAPI.checkGoogleSheetsAuth();
      
      if (!status.connected) {
        // –¢–æ–∫–µ–Ω –∏—Å—Ç–µ–∫ –∏–ª–∏ –æ—Ç–æ–∑–≤–∞–Ω
        const settings = JSON.parse(localStorage.getItem('hr-assistant-settings') || '{}');
        settings.googleSheetsConnected = false;
        localStorage.setItem('hr-assistant-settings', JSON.stringify(settings));
        
        this.eventBus.emit('auth:googleSheetsDisconnected');
      }

      return status.connected;
    } catch (error) {
      this.logger.warn('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Google Sheets', error);
      return false;
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WhatsApp
   * @returns {Promise<boolean>} –£—Å–ø–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async connectWhatsApp() {
    try {
      this.setLoading(true);
      
      // WhatsApp –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      const status = await this.extensionAPI.getWhatsAppStatus();
      
      if (status.connected) {
        this.eventBus.emit('auth:whatsappConnected');
        this.eventBus.emit('notification:success', 'WhatsApp –ø–æ–¥–∫–ª—é—á–µ–Ω');
        return true;
      } else {
        this.eventBus.emit('notification:warning', 
          '–û—Ç–∫—Ä–æ–π—Ç–µ WhatsApp Web –≤ –Ω–æ–≤–æ–π –≤–∫–ª–∞–¥–∫–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'
        );
        return false;
      }
    } catch (error) {
      this.handleError(error, 'connectWhatsApp');
      return false;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Telegram –±–æ—Ç–∞
   * @param {string} botToken - –¢–æ–∫–µ–Ω –±–æ—Ç–∞
   * @returns {Promise<boolean>} –£—Å–ø–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async connectTelegram(botToken) {
    try {
      this.setLoading(true);
      
      if (!botToken) {
        throw new Error('–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      const result = await this.extensionAPI.connectTelegramBot(botToken);
      
      if (result.success) {
        this.eventBus.emit('auth:telegramConnected');
        this.eventBus.emit('notification:success', 'Telegram –±–æ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
        const settings = JSON.parse(localStorage.getItem('hr-assistant-settings') || '{}');
        settings.telegramConnected = true;
        localStorage.setItem('hr-assistant-settings', JSON.stringify(settings));
        
        return true;
      } else {
        throw new Error(result.error || '–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω –±–æ—Ç–∞');
      }
    } catch (error) {
      this.handleError(error, 'connectTelegram');
      this.eventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Telegram –±–æ—Ç–∞');
      return false;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ Twilio SMS
   * @param {Object} credentials - –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   * @returns {Promise<boolean>} –£—Å–ø–µ—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async connectTwilio(credentials) {
    try {
      this.setLoading(true);
      
      const { accountSid, authToken, phoneNumber } = credentials;
      
      if (!accountSid || !authToken || !phoneNumber) {
        throw new Error('–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      const result = await this.extensionAPI.connectTwilio({
        accountSid,
        authToken,
        phoneNumber
      });
      
      if (result.success) {
        this.eventBus.emit('auth:twilioConnected');
        this.eventBus.emit('notification:success', 'Twilio SMS –ø–æ–¥–∫–ª—é—á–µ–Ω');
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å (–Ω–æ –Ω–µ credentials!)
        const settings = JSON.parse(localStorage.getItem('hr-assistant-settings') || '{}');
        settings.twilioConnected = true;
        localStorage.setItem('hr-assistant-settings', JSON.stringify(settings));
        
        return true;
      } else {
        throw new Error(result.error || '–ù–µ–≤–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ Twilio');
      }
    } catch (error) {
      this.handleError(error, 'connectTwilio');
      this.eventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å Twilio');
      return false;
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
   */
  async logout() {
    try {
      this.setLoading(true);
      this.logger.info('–í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã...');
      
      // –û—Ç–∫–ª—é—á–∞–µ–º –≤—Å–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏
      await this.disconnectGoogleSheets();
      
      // –û—á–∏—â–∞–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      localStorage.removeItem('hr-assistant-settings');
      localStorage.removeItem('hr-assistant-data');
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –≤—ã—Ö–æ–¥–µ
      this.eventBus.emit('auth:loggedOut');
      
      // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É
      setTimeout(() => {
        window.location.reload();
      }, 1000);
      
    } catch (error) {
      this.handleError(error, 'logout');
    } finally {
      this.setLoading(false);
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
   * @returns {Object} –î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  getCurrentUser() {
    // –í MVP –≤–µ—Ä—Å–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
    return {
      id: '1',
      name: 'HR Manager',
      email: 'hr@company.com',
      role: 'admin',
      avatar: null
    };
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * @param {Object} updates - –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
   * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
   */
  async updateProfile(updates) {
    try {
      this.setLoading(true);
      
      // –í MVP –≤–µ—Ä—Å–∏–∏ –ø—Ä–æ—Å—Ç–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ localStorage
      const currentUser = this.getCurrentUser();
      const updatedUser = { ...currentUser, ...updates };
      
      localStorage.setItem('hr-assistant-user', JSON.stringify(updatedUser));
      
      this.eventBus.emit('auth:profileUpdated', updatedUser);
      this.eventBus.emit('notification:success', '–ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
      
      return updatedUser;
    } catch (error) {
      this.handleError(error, 'updateProfile');
      throw error;
    } finally {
      this.setLoading(false);
    }
  }
}

export default AuthController;
