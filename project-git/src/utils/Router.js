// src/utils/Router.js
/**
 * üß≠ –ü—Ä–æ—Å—Ç–æ–π —Ä–æ—É—Ç–µ—Ä –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
 * @description –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
 */
import EventBus from './EventBus.js';
import Logger from './Logger.js';

class Router {
  constructor() {
    this.routes = {};
    this.currentRoute = null;
    this.logger = new Logger('Router');
    this.history = [];
    this.maxHistorySize = 50;
  }

  /**
   * –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
   * @param {Object} routes - –û–±—ä–µ–∫—Ç –º–∞—Ä—à—Ä—É—Ç–æ–≤
   */
  configure(routes) {
    this.routes = routes;
    this.logger.info('–†–æ—É—Ç–µ—Ä —Å–∫–æ–Ω—Ñ–∏–≥—É—Ä–∏—Ä–æ–≤–∞–Ω', Object.keys(routes));
  }

  /**
   * –ù–∞—á–∞–ª–æ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤
   */
  start() {
    // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è URL
    window.addEventListener('popstate', this.handlePopState.bind(this));
    
    // –ü–µ—Ä–µ—Ö–≤–∞—Ç—ã–≤–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ —Å—Å—ã–ª–∫–∞–º
    document.addEventListener('click', this.handleLinkClick.bind(this));
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
    this.navigate(window.location.pathname);
    
    this.logger.info('–†–æ—É—Ç–µ—Ä –∑–∞–ø—É—â–µ–Ω');
  }

  /**
   * –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ –º–∞—Ä—à—Ä—É—Ç—É
   * @param {string} path - –ü—É—Ç—å –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–∞—Ä—à—Ä—É—Ç–∞
   * @param {boolean} replace - –ó–∞–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç –≤ –∏—Å—Ç–æ—Ä–∏–∏
   */
  navigate(path, params = {}, replace = false) {
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å
      path = this.normalizePath(path);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ç–æ—Ç –∂–µ –ª–∏ —ç—Ç–æ –º–∞—Ä—à—Ä—É—Ç
      if (this.currentRoute === path && !params.force) {
        return;
      }
      
      // –ò—â–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞
      const handler = this.findRouteHandler(path);
      
      if (handler) {
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
        if (!replace) {
          this.addToHistory(path, params);
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º URL
        if (window.location.pathname !== path) {
          if (replace) {
            window.history.replaceState({ path, params }, '', path);
          } else {
            window.history.pushState({ path, params }, '', path);
          }
        }
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
        this.currentRoute = path;
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ URL
        const routeParams = this.extractParams(path, handler.pattern);
        const mergedParams = { ...routeParams, ...params };
        
        // –í—ã–∑—ã–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        handler.handler(mergedParams);
        
        // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        EventBus.emit('router:navigated', { path, params: mergedParams });
        
        this.logger.info(`–ù–∞–≤–∏–≥–∞—Ü–∏—è: ${path}`, mergedParams);
      } else {
        // –ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
        this.handleNotFound(path);
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏', error);
      EventBus.emit('router:error', { path, error });
    }
  }

  /**
   * –ü–æ–∏—Å–∫ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –º–∞—Ä—à—Ä—É—Ç–∞
   * @param {string} path - –ü—É—Ç—å
   * @returns {Object|null} –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∞
   */
  findRouteHandler(path) {
    // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º —Ç–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (this.routes[path]) {
      return {
        handler: this.routes[path],
        pattern: path
      };
    }
    
    // –ó–∞—Ç–µ–º –∏—â–µ–º —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
    for (const [pattern, handler] of Object.entries(this.routes)) {
      if (this.matchRoute(path, pattern)) {
        return { handler, pattern };
      }
    }
    
    return null;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –ø–∞—Ç—Ç–µ—Ä–Ω—É
   * @param {string} path - –ü—É—Ç—å
   * @param {string} pattern - –ü–∞—Ç—Ç–µ—Ä–Ω –º–∞—Ä—à—Ä—É—Ç–∞
   * @returns {boolean} –°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ª–∏ –º–∞—Ä—à—Ä—É—Ç
   */
  matchRoute(path, pattern) {
    // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω –≤ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ
    // /users/:id -> /users/([^/]+)
    const regexPattern = pattern
      .replace(/:[^/]+/g, '([^/]+)')
      .replace(/\//g, '\\/');
    
    const regex = new RegExp(`^${regexPattern}$`);
    return regex.test(path);
  }

  /**
   * –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ URL
   * @param {string} path - –ü—É—Ç—å
   * @param {string} pattern - –ü–∞—Ç—Ç–µ—Ä–Ω –º–∞—Ä—à—Ä—É—Ç–∞
   * @returns {Object} –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  extractParams(path, pattern) {
    const params = {};
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–º–µ–Ω–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ –ø–∞—Ç—Ç–µ—Ä–Ω–∞
    const paramNames = [];
    const paramRegex = /:([^/]+)/g;
    let match;
    
    while ((match = paramRegex.exec(pattern)) !== null) {
      paramNames.push(match[1]);
    }
    
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    const regexPattern = pattern
      .replace(/:[^/]+/g, '([^/]+)')
      .replace(/\//g, '\\/');
    
    const regex = new RegExp(`^${regexPattern}$`);
    const values = path.match(regex);
    
    if (values) {
      paramNames.forEach((name, index) => {
        params[name] = values[index + 1];
      });
    }
    
    return params;
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–µ—Ä–µ—Ö–æ–¥–∞ –ø–æ –∏—Å—Ç–æ—Ä–∏–∏ –±—Ä–∞—É–∑–µ—Ä–∞
   * @param {PopStateEvent} event - –°–æ–±—ã—Ç–∏–µ popstate
   */
  handlePopState(event) {
    const state = event.state || {};
    const path = state.path || window.location.pathname;
    const params = state.params || {};
    
    this.navigate(path, { ...params, fromHistory: true }, true);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–æ–≤ –ø–æ —Å—Å—ã–ª–∫–∞–º
   * @param {MouseEvent} event - –°–æ–±—ã—Ç–∏–µ –∫–ª–∏–∫–∞
   */
  handleLinkClick(event) {
    // –ò—â–µ–º –±–ª–∏–∂–∞–π—à—É—é —Å—Å—ã–ª–∫—É
    const link = event.target.closest('a');
    
    if (!link) return;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è —Å—Å—ã–ª–∫–∞
    const href = link.getAttribute('href');
    if (!href || href.startsWith('http') || href.startsWith('#')) {
      return;
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –∞—Ç—Ä–∏–±—É—Ç—ã
    if (link.hasAttribute('data-router-ignore') || 
        link.hasAttribute('download') ||
        link.hasAttribute('target')) {
      return;
    }
    
    // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ
    event.preventDefault();
    
    // –ù–∞–≤–∏–≥–∏—Ä—É–µ–º
    this.navigate(href);
  }

  /**
   * –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
   * @param {string} path - –ü—É—Ç—å
   */
  handleNotFound(path) {
    this.logger.warn(`–ú–∞—Ä—à—Ä—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: ${path}`);
    
    // –ü—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ 404
    if (this.routes['*'] || this.routes['/404']) {
      const handler = this.routes['*'] || this.routes['/404'];
      handler({ path });
    } else {
      // –≠–º–∏—Ç–∏–º —Å–æ–±—ã—Ç–∏–µ
      EventBus.emit('router:notFound', { path });
    }
  }

  /**
   * –ù–∞–≤–∏–≥–∞—Ü–∏—è –Ω–∞–∑–∞–¥
   */
  back() {
    window.history.back();
  }

  /**
   * –ù–∞–≤–∏–≥–∞—Ü–∏—è –≤–ø–µ—Ä–µ–¥
   */
  forward() {
    window.history.forward();
  }

  /**
   * –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
   */
  reload() {
    this.navigate(this.currentRoute, { force: true });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –º–∞—Ä—à—Ä—É—Ç–∞
   * @returns {string} –¢–µ–∫—É—â–∏–π –º–∞—Ä—à—Ä—É—Ç
   */
  getCurrentRoute() {
    return this.currentRoute || window.location.pathname;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
   * @returns {URLSearchParams} –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
   */
  getQueryParams() {
    return new URLSearchParams(window.location.search);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∑–∞–ø—Ä–æ—Å–∞
   * @param {Object} params - –ù–æ–≤—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @param {boolean} replace - –ó–∞–º–µ–Ω–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é
   */
  updateQueryParams(params, replace = false) {
    const url = new URL(window.location);
    
    Object.entries(params).forEach(([key, value]) => {
      if (value === null || value === undefined) {
        url.searchParams.delete(key);
      } else {
        url.searchParams.set(key, value);
      }
    });
    
    const newPath = url.pathname + url.search;
    
    if (replace) {
      window.history.replaceState(null, '', newPath);
    } else {
      window.history.pushState(null, '', newPath);
    }
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
   * @param {string} path - –ü—É—Ç—å
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
   */
  addToHistory(path, params) {
    this.history.push({
      path,
      params,
      timestamp: new Date()
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (this.history.length > this.maxHistorySize) {
      this.history.shift();
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
   * @returns {Array} –ò—Å—Ç–æ—Ä–∏—è
   */
  getHistory() {
    return [...this.history];
  }

  /**
   * –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
   */
  clearHistory() {
    this.history = [];
  }

  /**
   * –ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –ø—É—Ç–∏
   * @param {string} path - –ü—É—Ç—å
   * @returns {string} –ù–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π –ø—É—Ç—å
   */
  normalizePath(path) {
    // –£–±–∏—Ä–∞–µ–º –¥–≤–æ–π–Ω—ã–µ —Å–ª–µ—à–∏
    path = path.replace(/\/+/g, '/');
    
    // –£–±–∏—Ä–∞–µ–º –∫–æ–Ω–µ—á–Ω—ã–π —Å–ª–µ—à (–∫—Ä–æ–º–µ –∫–æ—Ä–Ω—è)
    if (path.length > 1 && path.endsWith('/')) {
      path = path.slice(0, -1);
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å–ª–µ—à
    if (!path.startsWith('/')) {
      path = '/' + path;
    }
    
    return path;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –º–∞—Ä—à—Ä—É—Ç–∞
   * @param {string} path - –ü—É—Ç—å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns {boolean} –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –º–∞—Ä—à—Ä—É—Ç
   */
  isActive(path) {
    const normalizedPath = this.normalizePath(path);
    const currentPath = this.getCurrentRoute();
    
    // –¢–æ—á–Ω–æ–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–µ
    if (normalizedPath === currentPath) {
      return true;
    }
    
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–ª–æ–∂–µ–Ω–Ω–æ—Å—Ç–∏ (–¥–ª—è –º–µ–Ω—é)
    if (currentPath.startsWith(normalizedPath + '/')) {
      return true;
    }
    
    return false;
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
   * @param {string} path - –ü—É—Ç—å
   * @param {Object} params - –ü–∞—Ä–∞–º–µ—Ç—Ä—ã
   * @returns {string} –ü–æ–ª–Ω—ã–π URL
   */
  generateUrl(path, params = {}) {
    let url = path;
    
    // –ó–∞–º–µ–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ –ø—É—Ç–∏
    Object.entries(params).forEach(([key, value]) => {
      const placeholder = `:${key}`;
      if (url.includes(placeholder)) {
        url = url.replace(placeholder, value);
        delete params[key];
      }
    });
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∫–∞–∫ query string
    const remainingParams = Object.entries(params)
      .filter(([, value]) => value !== null && value !== undefined)
      .map(([key, value]) => `${key}=${encodeURIComponent(value)}`)
      .join('&');
    
    if (remainingParams) {
      url += '?' + remainingParams;
    }
    
    return url;
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ—É—Ç–µ—Ä–∞
   */
  stop() {
    window.removeEventListener('popstate', this.handlePopState);
    document.removeEventListener('click', this.handleLinkClick);
    this.logger.info('–†–æ—É—Ç–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
}

export default Router;
