// src/utils/EventBus.js
/**
 * üì° –®–∏–Ω–∞ —Å–æ–±—ã—Ç–∏–π –¥–ª—è —Å–≤—è–∑–∏ –º–µ–∂–¥—É MVC –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏
 * @description –†–µ–∞–ª–∏–∑—É–µ—Ç –ø–∞—Ç—Ç–µ—Ä–Ω Observer –¥–ª—è –¥–µ–∫–∞–ø–ª–∏–Ω–≥–∞ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
 */
class EventBus {
  constructor() {
    this.events = new Map();
    this.maxListeners = 100;
    this.debug = import.meta.env.VITE_NODE_ENV === 'development';
  }

  /**
   * –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
   * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   * @param {Object} options - –û–ø—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏
   */
  on(eventName, callback, options = {}) {
    if (typeof callback !== 'function') {
      throw new Error('Callback –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ—É–Ω–∫—Ü–∏–µ–π');
    }

    if (!this.events.has(eventName)) {
      this.events.set(eventName, []);
    }

    const callbacks = this.events.get(eventName);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π
    if (callbacks.length >= this.maxListeners) {
      console.warn(`–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${eventName}: ${this.maxListeners}`);
    }

    const listener = {
      callback,
      once: options.once || false,
      id: Date.now() + Math.random()
    };

    callbacks.push(listener);

    if (this.debug) {
      console.debug(`üì° EventBus: –¥–æ–±–∞–≤–ª–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è "${eventName}"`);
    }

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –æ—Ç–ø–∏—Å–∫–∏
    return () => this.off(eventName, callback);
  }

  /**
   * –û–¥–Ω–æ—Ä–∞–∑–æ–≤–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ
   * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞
   */
  once(eventName, callback) {
    return this.on(eventName, callback, { once: true });
  }

  /**
   * –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏—è
   * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {Function} callback - –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   */
  off(eventName, callback) {
    if (!this.events.has(eventName)) return;

    const callbacks = this.events.get(eventName);
    const index = callbacks.findIndex(listener => listener.callback === callback);

    if (index > -1) {
      callbacks.splice(index, 1);
      
      if (this.debug) {
        console.debug(`üì° EventBus: —É–¥–∞–ª–µ–Ω —Å–ª—É—à–∞—Ç–µ–ª—å –¥–ª—è "${eventName}"`);
      }

      // –£–¥–∞–ª—è–µ–º –º–∞—Å—Å–∏–≤ –µ—Å–ª–∏ –æ–Ω –ø—É—Å—Ç–æ–π
      if (callbacks.length === 0) {
        this.events.delete(eventName);
      }
    }
  }

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
   * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {any} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   * @param {Object} options - –û–ø—Ü–∏–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
   */
  emit(eventName, data, options = {}) {
    if (!this.events.has(eventName)) {
      if (this.debug) {
        console.debug(`üì° EventBus: –Ω–µ—Ç —Å–ª—É—à–∞—Ç–µ–ª–µ–π –¥–ª—è "${eventName}"`);
      }
      return;
    }

    const callbacks = [...this.events.get(eventName)]; // –ö–æ–ø–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    const results = [];

    if (this.debug) {
      console.debug(`üì° EventBus: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è "${eventName}" –¥–ª—è ${callbacks.length} —Å–ª—É—à–∞—Ç–µ–ª–µ–π`, data);
    }

    callbacks.forEach(listener => {
      try {
        const result = listener.callback(data);
        results.push(result);

        // –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ—Ä–∞–∑–æ–≤—ã–µ —Å–ª—É—à–∞—Ç–µ–ª–∏
        if (listener.once) {
          this.off(eventName, listener.callback);
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${eventName}:`, error);
        
        // –í —Ä–µ–∂–∏–º–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
        if (import.meta.env.VITE_NODE_ENV === 'development') {
          throw error;
        }
      }
    });

    return results;
  }

  /**
   * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–æ–±—ã—Ç–∏—è
   * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @param {any} data - –î–∞–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
   */
  async emitAsync(eventName, data) {
    if (!this.events.has(eventName)) return [];

    const callbacks = [...this.events.get(eventName)];
    const results = [];

    for (const listener of callbacks) {
      try {
        const result = await listener.callback(data);
        results.push(result);

        if (listener.once) {
          this.off(eventName, listener.callback);
        }
      } catch (error) {
        console.error(`–û—à–∏–±–∫–∞ –≤ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ —Å–æ–±—ã—Ç–∏—è ${eventName}:`, error);
        results.push({ error });
      }
    }

    return results;
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Å–ª—É—à–∞—Ç–µ–ª–µ–π
   * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
   */
  removeAllListeners(eventName) {
    if (eventName) {
      this.events.delete(eventName);
      if (this.debug) {
        console.debug(`üì° EventBus: —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏ –¥–ª—è "${eventName}"`);
      }
    } else {
      this.events.clear();
      if (this.debug) {
        console.debug(`üì° EventBus: —É–¥–∞–ª–µ–Ω—ã –≤—Å–µ —Å–ª—É—à–∞—Ç–µ–ª–∏`);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
   * @param {string} eventName - –ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è
   * @returns {number} –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
   */
  listenerCount(eventName) {
    return this.events.has(eventName) ? this.events.get(eventName).length : 0;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
   * @returns {Array} –°–ø–∏—Å–æ–∫ –Ω–∞–∑–≤–∞–Ω–∏–π —Å–æ–±—ã—Ç–∏–π
   */
  eventNames() {
    return Array.from(this.events.keys());
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å–ª—É—à–∞—Ç–µ–ª–µ–π
   * @param {number} n - –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
   */
  setMaxListeners(n) {
    this.maxListeners = n;
  }

  /**
   * –í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–ª–∞–¥–∫–∏
   * @param {boolean} enabled - –í–∫–ª—é—á–∏—Ç—å –æ—Ç–ª–∞–¥–∫—É
   */
  setDebug(enabled) {
    this.debug = enabled;
  }

  /**
   * –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º
   * @returns {Object} –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
   */
  getStats() {
    const stats = {
      totalEvents: this.events.size,
      totalListeners: 0,
      events: {}
    };

    this.events.forEach((listeners, eventName) => {
      stats.totalListeners += listeners.length;
      stats.events[eventName] = listeners.length;
    });

    return stats;
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞
export default new EventBus();