// src/utils/dateHelpers.js
/**
 * üìÖ –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞—Ç–∞–º–∏
 * @description –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞—Ç
 */

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã
 * @param {Date|string} date - –î–∞—Ç–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 * @param {string} format - –§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –¥–∞—Ç–∞
 */
export const formatDate = (date, format = 'default') => {
  if (!date) return '-';
  
  const dateObj = new Date(date);
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –¥–∞—Ç—ã
  if (isNaN(dateObj.getTime())) {
    return '-';
  }
  
  switch (format) {
    case 'default':
      return dateObj.toLocaleDateString('ru-RU', {
        day: '2-digit',
        month: '2-digit',
        year: 'numeric'
      });
      
    case 'full':
      return dateObj.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'long',
        year: 'numeric',
        hour: '2-digit',
        minute: '2-digit'
      });
      
    case 'time':
      return dateObj.toLocaleTimeString('ru-RU', {
        hour: '2-digit',
        minute: '2-digit'
      });
      
    case 'relative':
      return getRelativeTimeString(dateObj);
      
    case 'short':
      return dateObj.toLocaleDateString('ru-RU', {
        day: 'numeric',
        month: 'short'
      });
      
    case 'iso':
      return dateObj.toISOString();
      
    default:
      return dateObj.toLocaleDateString('ru-RU');
  }
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
 * @param {Date} date - –î–∞—Ç–∞
 * @returns {string} –û—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
 */
export const getRelativeTimeString = (date) => {
  const now = new Date();
  const diffInSeconds = Math.floor((now - date) / 1000);
  
  if (diffInSeconds < 60) {
    return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
  }
  
  const diffInMinutes = Math.floor(diffInSeconds / 60);
  if (diffInMinutes < 60) {
    return `${diffInMinutes} ${pluralize(diffInMinutes, '–º–∏–Ω—É—Ç–∞', '–º–∏–Ω—É—Ç—ã', '–º–∏–Ω—É—Ç')} –Ω–∞–∑–∞–¥`;
  }
  
  const diffInHours = Math.floor(diffInMinutes / 60);
  if (diffInHours < 24) {
    return `${diffInHours} ${pluralize(diffInHours, '—á–∞—Å', '—á–∞—Å–∞', '—á–∞—Å–æ–≤')} –Ω–∞–∑–∞–¥`;
  }
  
  const diffInDays = Math.floor(diffInHours / 24);
  if (diffInDays < 7) {
    return `${diffInDays} ${pluralize(diffInDays, '–¥–µ–Ω—å', '–¥–Ω—è', '–¥–Ω–µ–π')} –Ω–∞–∑–∞–¥`;
  }
  
  if (diffInDays < 30) {
    const weeks = Math.floor(diffInDays / 7);
    return `${weeks} ${pluralize(weeks, '–Ω–µ–¥–µ–ª—è', '–Ω–µ–¥–µ–ª–∏', '–Ω–µ–¥–µ–ª—å')} –Ω–∞–∑–∞–¥`;
  }
  
  if (diffInDays < 365) {
    const months = Math.floor(diffInDays / 30);
    return `${months} ${pluralize(months, '–º–µ—Å—è—Ü', '–º–µ—Å—è—Ü–∞', '–º–µ—Å—è—Ü–µ–≤')} –Ω–∞–∑–∞–¥`;
  }
  
  const years = Math.floor(diffInDays / 365);
  return `${years} ${pluralize(years, '–≥–æ–¥', '–≥–æ–¥–∞', '–ª–µ—Ç')} –Ω–∞–∑–∞–¥`;
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–π
 * @param {Date|string} date - –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} True, –µ—Å–ª–∏ –¥–∞—Ç–∞ —Å–µ–≥–æ–¥–Ω—è—à–Ω—è—è
 */
export const isToday = (date) => {
  const today = new Date();
  const compareDate = new Date(date);
  
  return today.toDateString() === compareDate.toDateString();
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –≤—á–µ—Ä–∞—à–Ω–µ–π
 * @param {Date|string} date - –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} True, –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤—á–µ—Ä–∞—à–Ω—è—è
 */
export const isYesterday = (date) => {
  const yesterday = new Date();
  yesterday.setDate(yesterday.getDate() - 1);
  const compareDate = new Date(date);
  
  return yesterday.toDateString() === compareDate.toDateString();
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—á–∞–ª–∞ –¥–Ω—è
 * @param {Date|string} date - –î–∞—Ç–∞
 * @returns {Date} –ù–∞—á–∞–ª–æ –¥–Ω—è
 */
export const startOfDay = (date) => {
  const d = new Date(date);
  d.setHours(0, 0, 0, 0);
  return d;
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ü–∞ –¥–Ω—è
 * @param {Date|string} date - –î–∞—Ç–∞
 * @returns {Date} –ö–æ–Ω–µ—Ü –¥–Ω—è
 */
export const endOfDay = (date) => {
  const d = new Date(date);
  d.setHours(23, 59, 59, 999);
  return d;
};

/**
 * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –¥–Ω–µ–π –∫ –¥–∞—Ç–µ
 * @param {Date|string} date - –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞
 * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
 * @returns {Date} –ù–æ–≤–∞—è –¥–∞—Ç–∞
 */
export const addDays = (date, days) => {
  const result = new Date(date);
  result.setDate(result.getDate() + days);
  return result;
};

/**
 * –í—ã—á–∏—Ç–∞–Ω–∏–µ –¥–Ω–µ–π –∏–∑ –¥–∞—Ç—ã
 * @param {Date|string} date - –ò—Å—Ö–æ–¥–Ω–∞—è –¥–∞—Ç–∞
 * @param {number} days - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
 * @returns {Date} –ù–æ–≤–∞—è –¥–∞—Ç–∞
 */
export const subtractDays = (date, days) => {
  return addDays(date, -days);
};

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–∑–Ω–∏—Ü—ã –≤ –¥–Ω—è—Ö –º–µ–∂–¥—É –¥–∞—Ç–∞–º–∏
 * @param {Date|string} date1 - –ü–µ—Ä–≤–∞—è –¥–∞—Ç–∞
 * @param {Date|string} date2 - –í—Ç–æ—Ä–∞—è –¥–∞—Ç–∞
 * @returns {number} –†–∞–∑–Ω–∏—Ü–∞ –≤ –¥–Ω—è—Ö
 */
export const getDaysDifference = (date1, date2) => {
  const d1 = new Date(date1);
  const d2 = new Date(date2);
  const diffTime = Math.abs(d2 - d1);
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return diffDays;
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—à–ª–∞ –ª–∏ –¥–∞—Ç–∞
 * @param {Date|string} date - –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} True, –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ –ø—Ä–æ—à–ª–æ–º
 */
export const isPast = (date) => {
  return new Date(date) < new Date();
};

/**
 * –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥–∞—Ç–∞ –±—É–¥—É—â–µ–π
 * @param {Date|string} date - –î–∞—Ç–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
 * @returns {boolean} True, –µ—Å–ª–∏ –¥–∞—Ç–∞ –≤ –±—É–¥—É—â–µ–º
 */
export const isFuture = (date) => {
  return new Date(date) > new Date();
};

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–∞—Ç
 * @param {Date|string} startDate - –ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞
 * @param {Date|string} endDate - –ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞
 * @returns {string} –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
 */
export const formatDateRange = (startDate, endDate) => {
  const start = new Date(startDate);
  const end = new Date(endDate);
  
  // –ï—Å–ª–∏ –¥–∞—Ç—ã –≤ –æ–¥–Ω–æ–º –¥–Ω–µ
  if (start.toDateString() === end.toDateString()) {
    return `${formatDate(start, 'default')} ${formatDate(start, 'time')} - ${formatDate(end, 'time')}`;
  }
  
  // –ï—Å–ª–∏ –¥–∞—Ç—ã –≤ –æ–¥–Ω–æ–º –º–µ—Å—è—Ü–µ
  if (start.getMonth() === end.getMonth() && start.getFullYear() === end.getFullYear()) {
    return `${start.getDate()}-${end.getDate()} ${start.toLocaleDateString('ru-RU', { month: 'long', year: 'numeric' })}`;
  }
  
  // –†–∞–∑–Ω—ã–µ –º–µ—Å—è—Ü—ã
  return `${formatDate(start, 'short')} - ${formatDate(end, 'short')}`;
};

/**
 * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã –∏–∑ —Å—Ç—Ä–æ–∫–∏
 * @param {string} dateString - –°—Ç—Ä–æ–∫–∞ —Å –¥–∞—Ç–æ–π
 * @returns {Date|null} –†–∞—Å–ø–∞—Ä—Å–µ–Ω–Ω–∞—è –¥–∞—Ç–∞ –∏–ª–∏ null
 */
export const parseDate = (dateString) => {
  if (!dateString) return null;
  
  // –ü–æ–ø—ã—Ç–∫–∞ —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å —Ä–∞–∑–ª–∏—á–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
  const formats = [
    /(\d{2})\.(\d{2})\.(\d{4})/, // DD.MM.YYYY
    /(\d{2})\/(\d{2})\/(\d{4})/, // DD/MM/YYYY
    /(\d{4})-(\d{2})-(\d{2})/,   // YYYY-MM-DD
  ];
  
  for (const format of formats) {
    const match = dateString.match(format);
    if (match) {
      if (format === formats[2]) {
        // YYYY-MM-DD
        return new Date(match[1], match[2] - 1, match[3]);
      } else {
        // DD.MM.YYYY –∏–ª–∏ DD/MM/YYYY
        return new Date(match[3], match[2] - 1, match[1]);
      }
    }
  }
  
  // –ü–æ–ø—ã—Ç–∫–∞ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –ø–∞—Ä—Å–∏–Ω–≥–∞
  const date = new Date(dateString);
  return isNaN(date.getTime()) ? null : date;
};

/**
 * –°–∫–ª–æ–Ω–µ–Ω–∏–µ —á–∏—Å–ª–∏—Ç–µ–ª—å–Ω—ã—Ö
 * @param {number} number - –ß–∏—Å–ª–æ
 * @param {string} one - –§–æ—Ä–º–∞ –¥–ª—è 1
 * @param {string} two - –§–æ—Ä–º–∞ –¥–ª—è 2-4
 * @param {string} five - –§–æ—Ä–º–∞ –¥–ª—è 5-0
 * @returns {string} –ü—Ä–∞–≤–∏–ª—å–Ω–∞—è —Ñ–æ—Ä–º–∞
 */
function pluralize(number, one, two, five) {
  const n = Math.abs(number);
  const n10 = n % 10;
  const n100 = n % 100;
  
  if (n10 === 1 && n100 !== 11) {
    return one;
  }
  
  if (n10 >= 2 && n10 <= 4 && (n100 < 10 || n100 >= 20)) {
    return two;
  }
  
  return five;
}

// –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Ñ—É–Ω–∫—Ü–∏–π
export default {
  formatDate,
  getRelativeTimeString,
  isToday,
  isYesterday,
  startOfDay,
  endOfDay,
  addDays,
  subtractDays,
  getDaysDifference,
  isPast,
  isFuture,
  formatDateRange,
  parseDate
};
