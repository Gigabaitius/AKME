// src/views/components/common/Modal.jsx
/**
 * ü™ü –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 * @description –£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
 */
import React, { useEffect, useRef } from 'react';
import { createPortal } from 'react-dom';
import { motion, AnimatePresence } from 'framer-motion';
import { X } from 'lucide-react';
import './Modal.css';

/**
 * –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 * @param {Object} props - –ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {React.ReactNode} props.children - –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
 * @param {string} props.title - –ó–∞–≥–æ–ª–æ–≤–æ–∫
 * @param {Function} props.onClose - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è
 * @param {string} props.size - –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ (sm, md, lg, xl, full)
 * @param {boolean} props.showCloseButton - –ü–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É –∑–∞–∫—Ä—ã—Ç–∏—è
 * @param {boolean} props.closeOnOverlay - –ó–∞–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–∏ –∫–ª–∏–∫–µ –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
 * @param {boolean} props.closeOnEsc - –ó–∞–∫—Ä—ã–≤–∞—Ç—å –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ Esc
 * @param {string} props.className - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ CSS –∫–ª–∞—Å—Å—ã
 * @returns {JSX.Element|null} –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ
 */
const Modal = ({
  children,
  title,
  onClose,
  size = 'md',
  showCloseButton = true,
  closeOnOverlay = true,
  closeOnEsc = true,
  className = ''
}) => {
  const modalRef = useRef(null);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Esc
  useEffect(() => {
    if (!closeOnEsc) return;

    const handleEsc = (e) => {
      if (e.key === 'Escape') {
        onClose();
      }
    };

    document.addEventListener('keydown', handleEsc);
    return () => document.removeEventListener('keydown', handleEsc);
  }, [closeOnEsc, onClose]);

  // –ë–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ body
  useEffect(() => {
    const originalOverflow = document.body.style.overflow;
    document.body.style.overflow = 'hidden';

    return () => {
      document.body.style.overflow = originalOverflow;
    };
  }, []);

  // –§–æ–∫—É—Å –Ω–∞ –º–æ–¥–∞–ª—å–Ω–æ–º –æ–∫–Ω–µ
  useEffect(() => {
    if (modalRef.current) {
      modalRef.current.focus();
    }
  }, []);

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–ª–∏–∫–∞ –Ω–∞ –æ–≤–µ—Ä–ª–µ–π
  const handleOverlayClick = (e) => {
    if (closeOnOverlay && e.target === e.currentTarget) {
      onClose();
    }
  };

  // –ê–Ω–∏–º–∞—Ü–∏—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –æ–∫–Ω–∞
  const modalVariants = {
    hidden: {
      opacity: 0,
      scale: 0.95,
      y: -20
    },
    visible: {
      opacity: 1,
      scale: 1,
      y: 0,
      transition: {
        type: 'spring',
        stiffness: 300,
        damping: 30
      }
    },
    exit: {
      opacity: 0,
      scale: 0.95,
      y: -20,
      transition: {
        duration: 0.2
      }
    }
  };

  // –ê–Ω–∏–º–∞—Ü–∏—è –æ–≤–µ—Ä–ª–µ—è
  const overlayVariants = {
    hidden: { opacity: 0 },
    visible: { 
      opacity: 1,
      transition: { duration: 0.2 }
    },
    exit: { 
      opacity: 0,
      transition: { duration: 0.2 }
    }
  };

  const modalContent = (
    <AnimatePresence>
      <motion.div
        className="modal-overlay"
        variants={overlayVariants}
        initial="hidden"
        animate="visible"
        exit="exit"
        onClick={handleOverlayClick}
      >
        <motion.div
          ref={modalRef}
          className={`modal modal-${size} ${className}`}
          variants={modalVariants}
          initial="hidden"
          animate="visible"
          exit="exit"
          tabIndex={-1}
          role="dialog"
          aria-modal="true"
          aria-labelledby={title ? 'modal-title' : undefined}
        >
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
          {(title || showCloseButton) && (
            <div className="modal-header">
              {title && (
                <h2 id="modal-title" className="modal-title">
                  {title}
                </h2>
              )}
              {showCloseButton && (
                <button
                  className="modal-close"
                  onClick={onClose}
                  aria-label="–ó–∞–∫—Ä—ã—Ç—å"
                >
                  <X size={24} />
                </button>
              )}
            </div>
          )}

          {/* –ö–æ–Ω—Ç–µ–Ω—Ç */}
          <div className="modal-body">
            {children}
          </div>
        </motion.div>
      </motion.div>
    </AnimatePresence>
  );

  // –†–µ–Ω–¥–µ—Ä–∏–º —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª
  return createPortal(
    modalContent,
    document.body
  );
};

export default Modal;
