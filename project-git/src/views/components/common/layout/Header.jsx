// src/views/components/layout/Header.jsx
/**
 * üéØ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @description –í–µ—Ä—Ö–Ω—è—è –ø–∞–Ω–µ–ª—å —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 */
import React, { useState, useRef, useEffect } from 'react';
import { 
  Menu, 
  Bell, 
  Sun, 
  Moon, 
  Search,
  User,
  LogOut,
  Settings,
  HelpCircle,
  ChevronDown
} from 'lucide-react';

// –£—Ç–∏–ª–∏—Ç—ã
import EventBus from '@utils/EventBus';

// –°—Ç–∏–ª–∏
import './Header.css';

/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∑–∞–≥–æ–ª–æ–≤–∫–∞
 * @param {Object} props - –ü—Ä–æ–ø—Å—ã –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
 * @param {Function} props.onMenuClick - –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –º–µ–Ω—é
 * @param {boolean} props.isSidebarOpen - –û—Ç–∫—Ä—ã—Ç –ª–∏ —Å–∞–π–¥–±–∞—Ä
 * @param {Object} props.settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
 * @param {Array} props.notifications - –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
 * @param {string} props.currentPage - –¢–µ–∫—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
 * @returns {JSX.Element} –ó–∞–≥–æ–ª–æ–≤–æ–∫
 */
const Header = ({ 
  onMenuClick, 
  isSidebarOpen, 
  settings = {}, 
  notifications = [],
  currentPage 
}) => {
  const [showNotifications, setShowNotifications] = useState(false);
  const [showUserMenu, setShowUserMenu] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const notificationRef = useRef(null);
  const userMenuRef = useRef(null);

  // –ó–∞–∫—Ä—ã—Ç–∏–µ –≤—ã–ø–∞–¥–∞—é—â–∏—Ö –º–µ–Ω—é –ø—Ä–∏ –∫–ª–∏–∫–µ –≤–Ω–µ
  useEffect(() => {
    const handleClickOutside = (event) => {
      if (notificationRef.current && !notificationRef.current.contains(event.target)) {
        setShowNotifications(false);
      }
      if (userMenuRef.current && !userMenuRef.current.contains(event.target)) {
        setShowUserMenu(false);
      }
    };

    document.addEventListener('mousedown', handleClickOutside);
    return () => document.removeEventListener('mousedown', handleClickOutside);
  }, []);

  // –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã
  const toggleTheme = () => {
    const newTheme = settings.theme === 'dark' ? 'light' : 'dark';
    EventBus.emit('settings:update', { theme: newTheme });
  };

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞
  const handleSearch = (e) => {
    e.preventDefault();
    if (searchQuery.trim()) {
      EventBus.emit('search:query', searchQuery);
    }
  };

  // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
  const handleLogout = () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?')) {
      EventBus.emit('auth:logout');
    }
  };

  // –ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  const unreadCount = notifications.filter(n => !n.read).length;

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  const getPageTitle = () => {
    const titles = {
      dashboard: '–î–∞—à–±–æ—Ä–¥',
      candidates: '–ö–∞–Ω–¥–∏–¥–∞—Ç—ã',
      'shift-workers': '–í–∞—Ö—Ç–æ–≤–∏–∫–∏',
      silent: '–ú–æ–ª—á–∞—â–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã',
      transferred: '–ü–µ—Ä–µ–¥–∞–Ω–Ω—ã–µ –Ω–∞ 1-—é –ª–∏–Ω–∏—é',
      training: '–û–±—É—á–µ–Ω–∏–µ GPT',
      knowledge: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π',
      mailings: '–†–∞—Å—Å—ã–ª–∫–∏',
      settings: '–ù–∞—Å—Ç—Ä–æ–π–∫–∏'
    };
    return titles[currentPage] || 'HR Assistant';
  };

  return (
    <header className="header">
      <div className="header-left">
        {/* –ö–Ω–æ–ø–∫–∞ –º–µ–Ω—é */}
        <button
          className="header-menu-button"
          onClick={onMenuClick}
          aria-label={isSidebarOpen ? '–ó–∞–∫—Ä—ã—Ç—å –º–µ–Ω—é' : '–û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é'}
        >
          <Menu size={24} />
        </button>

        {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
        <h2 className="header-title">{getPageTitle()}</h2>
      </div>

      <div className="header-center">
        {/* –ü–æ–∏—Å–∫ */}
        <form className="header-search" onSubmit={handleSearch}>
          <Search size={20} className="search-icon" />
          <input
            type="text"
            placeholder="–ü–æ–∏—Å–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤, –ø—Ä–æ–µ–∫—Ç–æ–≤..."
            value={searchQuery}
            onChange={(e) => setSearchQuery(e.target.value)}
            className="search-input"
          />
          {searchQuery && (
            <button
              type="button"
              className="search-clear"
              onClick={() => setSearchQuery('')}
            >
              √ó
            </button>
          )}
        </form>
      </div>

      <div className="header-right">
        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã */}
        <button
          className="header-icon-button"
          onClick={toggleTheme}
          aria-label="–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É"
        >
          {settings.theme === 'dark' ? <Sun size={20} /> : <Moon size={20} />}
        </button>

        {/* –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è */}
        <div className="notification-wrapper" ref={notificationRef}>
          <button
            className={`header-icon-button ${unreadCount > 0 ? 'has-badge' : ''}`}
            onClick={() => setShowNotifications(!showNotifications)}
            aria-label="–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
          >
            <Bell size={20} />
            {unreadCount > 0 && (
              <span className="notification-badge">{unreadCount}</span>
            )}
          </button>

          {showNotifications && (
            <div className="notification-dropdown">
              <div className="dropdown-header">
                <h3>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è</h3>
                {unreadCount > 0 && (
                  <button
                    className="mark-all-read"
                    onClick={() => EventBus.emit('notifications:markAllRead')}
                  >
                    –ü—Ä–æ—á–∏—Ç–∞—Ç—å –≤—Å–µ
                  </button>
                )}
              </div>
              <div className="notification-list">
                {notifications.length > 0 ? (
                  notifications.slice(0, 5).map(notification => (
                    <div
                      key={notification.id}
                      className={`notification-item ${notification.read ? 'read' : 'unread'}`}
                      onClick={() => EventBus.emit('notification:click', notification.id)}
                    >
                      <div className="notification-icon">
                        {notification.type === 'success' && '‚úÖ'}
                        {notification.type === 'error' && '‚ùå'}
                        {notification.type === 'warning' && '‚ö†Ô∏è'}
                        {notification.type === 'info' && '‚ÑπÔ∏è'}
                      </div>
                      <div className="notification-content">
                        <p className="notification-text">{notification.message}</p>
                        <span className="notification-time">
                          {new Date(notification.timestamp).toLocaleTimeString('ru-RU', {
                            hour: '2-digit',
                            minute: '2-digit'
                          })}
                        </span>
                      </div>
                    </div>
                  ))
                ) : (
                  <div className="no-notifications">
                    <p>–ù–µ—Ç –Ω–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</p>
                  </div>
                )}
              </div>
              {notifications.length > 5 && (
                <div className="dropdown-footer">
                  <button
                    onClick={() => EventBus.emit('navigation:request', { page: 'notifications' })}
                  >
                    –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ
                  </button>
                </div>
              )}
            </div>
          )}
        </div>

        {/* –ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è */}
        <div className="user-menu-wrapper" ref={userMenuRef}>
          <button
            className="user-menu-button"
            onClick={() => setShowUserMenu(!showUserMenu)}
            aria-label="–ú–µ–Ω—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
          >
            <div className="user-avatar">
              <User size={20} />
            </div>
            <span className="user-name">HR Manager</span>
            <ChevronDown size={16} className={`chevron ${showUserMenu ? 'rotated' : ''}`} />
          </button>

          {showUserMenu && (
            <div className="user-dropdown">
              <div className="dropdown-header">
                <div className="user-info">
                  <div className="user-avatar-large">
                    <User size={32} />
                  </div>
                  <div className="user-details">
                    <p className="user-fullname">HR Manager</p>
                    <p className="user-email">hr@company.com</p>
                  </div>
                </div>
              </div>
              <div className="dropdown-divider" />
              <div className="dropdown-menu">
                <button
                  className="dropdown-item"
                  onClick={() => EventBus.emit('navigation:request', { page: 'profile' })}
                >
                  <User size={18} />
                  <span>–ü—Ä–æ—Ñ–∏–ª—å</span>
                </button>
                <button
                  className="dropdown-item"
                  onClick={() => EventBus.emit('navigation:request', { page: 'settings' })}
                >
                  <Settings size={18} />
                  <span>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</span>
                </button>
                <button
                  className="dropdown-item"
                  onClick={() => window.open('/help', '_blank')}
                >
                  <HelpCircle size={18} />
                  <span>–ü–æ–º–æ—â—å</span>
                </button>
              </div>
              <div className="dropdown-divider" />
              <div className="dropdown-footer">
                <button
                  className="dropdown-item logout"
                  onClick={handleLogout}
                >
                  <LogOut size={18} />
                  <span>–í—ã–π—Ç–∏</span>
                </button>
              </div>
            </div>
          )}
        </div>
      </div>
    </header>
  );
};

export default Header;
