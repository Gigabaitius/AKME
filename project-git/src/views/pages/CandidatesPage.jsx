// src/views/pages/CandidatesPage.jsx
/**
 * üë• –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
 * @description –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–æ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
 */
import React, { useState, useEffect, useCallback } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Plus, 
  Search, 
  Filter, 
  Download, 
  Upload,
  Users,
  FileSpreadsheet,
  MessageCircle,
  Trash2,
  Edit,
  CheckCircle,
  XCircle
} from 'lucide-react';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import CandidateView from '@components/features/CandidateView';
import CandidateForm from '@components/features/CandidateForm';
import Button from '@components/common/Button';
import Modal from '@components/common/Modal';

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —É—Ç–∏–ª–∏—Ç—ã
import CandidateController from '@controllers/CandidateController';
import EventBus from '@utils/EventBus';
import Logger from '@utils/Logger';

// –°—Ç–∏–ª–∏
import './CandidatesPage.css';

const logger = new Logger('CandidatesPage');

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
 * @returns {JSX.Element} –°—Ç—Ä–∞–Ω–∏—Ü–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
 */
const CandidatesPage = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [candidates, setCandidates] = useState([]);
  const [filteredCandidates, setFilteredCandidates] = useState([]);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedProject, setSelectedProject] = useState('all');
  const [selectedStatus, setSelectedStatus] = useState('all');
  const [showAddModal, setShowAddModal] = useState(false);
  const [showEditModal, setShowEditModal] = useState(false);
  const [editingCandidate, setEditingCandidate] = useState(null);
  const [showFilters, setShowFilters] = useState(false);
  const [selectedCandidates, setSelectedCandidates] = useState([]);
  const [isSelectionMode, setIsSelectionMode] = useState(false);

  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
  const [controller] = useState(() => new CandidateController());

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  const loadCandidates = useCallback(async () => {
    try {
      setIsLoading(true);
      const allCandidates = await controller.getAllCandidates();
      setCandidates(allCandidates);
      setFilteredCandidates(allCandidates);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤', error);
      EventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤');
    } finally {
      setIsLoading(false);
    }
  }, [controller]);

  // –≠—Ñ—Ñ–µ–∫—Ç –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadCandidates();

    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    const handleCandidateCreated = () => loadCandidates();
    const handleCandidateUpdated = () => loadCandidates();
    const handleCandidateDeleted = () => loadCandidates();
    const handleAddNew = () => setShowAddModal(true);
    const handleEditCandidate = (candidate) => {
      setEditingCandidate(candidate);
      setShowEditModal(true);
    };

    EventBus.on('candidate:created', handleCandidateCreated);
    EventBus.on('candidate:updated', handleCandidateUpdated);
    EventBus.on('candidate:deleted', handleCandidateDeleted);
    EventBus.on('candidate:addNew', handleAddNew);
    EventBus.on('candidate:edit', handleEditCandidate);

    return () => {
      EventBus.off('candidate:created', handleCandidateCreated);
      EventBus.off('candidate:updated', handleCandidateUpdated);
      EventBus.off('candidate:deleted', handleCandidateDeleted);
      EventBus.off('candidate:addNew', handleAddNew);
      EventBus.off('candidate:edit', handleEditCandidate);
    };
  }, [loadCandidates]);

  // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  useEffect(() => {
    let filtered = [...candidates];

    // –ü–æ–∏—Å–∫
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(candidate =>
        candidate.name?.toLowerCase().includes(query) ||
        candidate.phone?.toLowerCase().includes(query) ||
        candidate.project?.toLowerCase().includes(query) ||
        candidate.inn?.toLowerCase().includes(query) ||
        candidate.snils?.toLowerCase().includes(query)
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ –ø—Ä–æ–µ–∫—Ç—É
    if (selectedProject !== 'all') {
      filtered = filtered.filter(candidate => 
        candidate.project === selectedProject
      );
    }

    // –§–∏–ª—å—Ç—Ä –ø–æ —Å—Ç–∞—Ç—É—Å—É
    if (selectedStatus !== 'all') {
      filtered = filtered.filter(candidate => 
        candidate.status === selectedStatus
      );
    }

    setFilteredCandidates(filtered);
  }, [candidates, searchQuery, selectedProject, selectedStatus]);

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –ø—Ä–æ–µ–∫—Ç–æ–≤
  const getUniqueProjects = () => {
    const projects = new Set(candidates.map(c => c.project).filter(Boolean));
    return Array.from(projects).sort();
  };

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
  const getUniqueStatuses = () => {
    const statuses = new Set(candidates.map(c => c.status).filter(Boolean));
    return Array.from(statuses).sort();
  };

  // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  const handleAddCandidate = async (candidateData) => {
    try {
      await controller.createCandidate(candidateData);
      setShowAddModal(false);
      EventBus.emit('notification:success', '–ö–∞–Ω–¥–∏–¥–∞—Ç –¥–æ–±–∞–≤–ª–µ–Ω');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞', error);
      EventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
    }
  };

  // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  const handleEditCandidate = async (candidateData) => {
    try {
      await controller.updateCandidate(editingCandidate.id, candidateData);
      setShowEditModal(false);
      setEditingCandidate(null);
      EventBus.emit('notification:success', '–ö–∞–Ω–¥–∏–¥–∞—Ç –æ–±–Ω–æ–≤–ª–µ–Ω');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞', error);
      EventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
    }
  };

  // –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  const handleDeleteCandidate = async (candidateId) => {
    try {
      await controller.deleteCandidate(candidateId);
      EventBus.emit('notification:success', '–ö–∞–Ω–¥–∏–¥–∞—Ç —É–¥–∞–ª–µ–Ω');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–∞', error);
      EventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
    }
  };

  // –ú–∞—Å—Å–æ–≤–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ
  const handleBulkDelete = async () => {
    if (selectedCandidates.length === 0) return;

    if (window.confirm(`–£–¥–∞–ª–∏—Ç—å ${selectedCandidates.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤?`)) {
      try {
        for (const id of selectedCandidates) {
          await controller.deleteCandidate(id);
        }
        setSelectedCandidates([]);
        setIsSelectionMode(false);
        EventBus.emit('notification:success', '–ö–∞–Ω–¥–∏–¥–∞—Ç—ã —É–¥–∞–ª–µ–Ω—ã');
      } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è', error);
        EventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤');
      }
    }
  };

  // –≠–∫—Å–ø–æ—Ä—Ç –≤ CSV
  const handleExport = async () => {
    try {
      const csv = await controller.exportToCSV(filteredCandidates);
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = `candidates_${new Date().toISOString().split('T')[0]}.csv`;
      link.click();
      
      EventBus.emit('notification:success', '–ö–∞–Ω–¥–∏–¥–∞—Ç—ã —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', error);
      EventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤');
    }
  };

  // –ò–º–ø–æ—Ä—Ç –∏–∑ CSV
  const handleImport = async (event) => {
    const file = event.target.files[0];
    if (!file) return;

    try {
      // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –∏–º–ø–æ—Ä—Ç
      EventBus.emit('notification:info', '–ò–º–ø–æ—Ä—Ç –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–µ–π –≤–µ—Ä—Å–∏–∏');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞', error);
      EventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤');
    }
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = async (candidate) => {
    try {
      // TODO: –û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
      EventBus.emit('whatsapp:sendMessage', candidate);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', error);
    }
  };

  // –í—ã–±–æ—Ä –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
  const toggleCandidateSelection = (candidateId) => {
    setSelectedCandidates(prev => {
      if (prev.includes(candidateId)) {
        return prev.filter(id => id !== candidateId);
      } else {
        return [...prev, candidateId];
      }
    });
  };

  // –í—ã–±—Ä–∞—Ç—å –≤—Å–µ—Ö
  const selectAll = () => {
    if (selectedCandidates.length === filteredCandidates.length) {
      setSelectedCandidates([]);
    } else {
      setSelectedCandidates(filteredCandidates.map(c => c.id));
    }
  };

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å Google Sheets
  const handleSyncGoogleSheets = async () => {
    try {
      await controller.syncWithGoogleSheets();
      EventBus.emit('notification:success', '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', error);
      EventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å Google Sheets');
    }
  };

  if (isLoading) {
    return (
      <div className="page-loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤...</p>
      </div>
    );
  }

  return (
    <div className="candidates-page">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="page-header">
        <div className="header-content">
          <h1 className="page-title">–ö–∞–Ω–¥–∏–¥–∞—Ç—ã</h1>
          <p className="page-subtitle">
            –í—Å–µ–≥–æ: {candidates.length} | –ü–æ–∫–∞–∑–∞–Ω–æ: {filteredCandidates.length}
          </p>
        </div>
        
        <div className="header-actions">
          <Button
            variant="primary"
            onClick={() => setShowAddModal(true)}
          >
            <Plus size={20} />
            –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
          </Button>
        </div>
      </div>

      {/* –ü–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤ */}
      <div className="toolbar">
        <div className="toolbar-left">
          {/* –ü–æ–∏—Å–∫ */}
          <div className="search-box">
            <Search size={20} className="search-icon" />
            <input
              type="text"
              placeholder="–ü–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏, —Ç–µ–ª–µ—Ñ–æ–Ω—É, –¥–æ–∫—É–º–µ–Ω—Ç–∞–º..."
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
              className="search-input"
            />
          </div>

          {/* –§–∏–ª—å—Ç—Ä—ã */}
          <Button
            variant="secondary"
            onClick={() => setShowFilters(!showFilters)}
            className={showFilters ? 'active' : ''}
          >
            <Filter size={20} />
            –§–∏–ª—å—Ç—Ä—ã
          </Button>

          {/* –†–µ–∂–∏–º –≤—ã–±–æ—Ä–∞ */}
          <Button
            variant={isSelectionMode ? 'primary' : 'secondary'}
            onClick={() => {
              setIsSelectionMode(!isSelectionMode);
              setSelectedCandidates([]);
            }}
          >
            <CheckCircle size={20} />
            {isSelectionMode ? '–û—Ç–º–µ–Ω–∏—Ç—å –≤—ã–±–æ—Ä' : '–í—ã–±—Ä–∞—Ç—å'}
          </Button>
        </div>

        <div className="toolbar-right">
          {/* –ú–∞—Å—Å–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
          {isSelectionMode && selectedCandidates.length > 0 && (
            <div className="bulk-actions">
              <span className="selected-count">
                –í—ã–±—Ä–∞–Ω–æ: {selectedCandidates.length}
              </span>
              <Button
                variant="danger"
                size="sm"
                onClick={handleBulkDelete}
              >
                <Trash2 size={16} />
                –£–¥–∞–ª–∏—Ç—å
              </Button>
            </div>
          )}

          {/* –≠–∫—Å–ø–æ—Ä—Ç/–ò–º–ø–æ—Ä—Ç */}
          <Button
            variant="secondary"
            onClick={handleExport}
          >
            <Download size={20} />
            –≠–∫—Å–ø–æ—Ä—Ç
          </Button>

          <label className="import-button">
            <input
              type="file"
              accept=".csv"
              onChange={handleImport}
              hidden
            />
            <Button variant="secondary" as="span">
              <Upload size={20} />
              –ò–º–ø–æ—Ä—Ç
            </Button>
          </label>

          {/* –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è */}
          <Button
            variant="secondary"
            onClick={handleSyncGoogleSheets}
          >
            <FileSpreadsheet size={20} />
            –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è
          </Button>
        </div>
      </div>

      {/* –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤ */}
      <AnimatePresence>
        {showFilters && (
          <motion.div
            className="filters-panel"
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: 'auto', opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.2 }}
          >
            <div className="filters-content">
              <div className="filter-group">
                <label>–ü—Ä–æ–µ–∫—Ç:</label>
                <select
                  value={selectedProject}
                  onChange={(e) => setSelectedProject(e.target.value)}
                  className="filter-select"
                >
                  <option value="all">–í—Å–µ –ø—Ä–æ–µ–∫—Ç—ã</option>
                  {getUniqueProjects().map(project => (
                    <option key={project} value={project}>{project}</option>
                  ))}
                </select>
              </div>

              <div className="filter-group">
                <label>–°—Ç–∞—Ç—É—Å:</label>
                <select
                  value={selectedStatus}
                  onChange={(e) => setSelectedStatus(e.target.value)}
                  className="filter-select"
                >
                  <option value="all">–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã</option>
                  {getUniqueStatuses().map(status => (
                    <option key={status} value={status}>{status}</option>
                  ))}
                </select>
              </div>

              <Button
                variant="secondary"
                size="sm"
                onClick={() => {
                  setSelectedProject('all');
                  setSelectedStatus('all');
                  setSearchQuery('');
                }}
              >
                –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã
              </Button>
            </div>
          </motion.div>
        )}
      </AnimatePresence>

      {/* –°–ø–∏—Å–æ–∫ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ */}
      <div className="candidates-list">
        {isSelectionMode && (
          <div className="selection-header">
            <label className="checkbox-label">
              <input
                type="checkbox"
                checked={
                  selectedCandidates.length === filteredCandidates.length &&
                  filteredCandidates.length > 0
                }
                onChange={selectAll}
              />
              <span>–í—ã–±—Ä–∞—Ç—å –≤—Å–µ</span>
            </label>
          </div>
        )}

        {filteredCandidates.length > 0 ? (
          <AnimatePresence>
            {filteredCandidates.map((candidate, index) => (
              <motion.div
                key={candidate.id}
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                exit={{ opacity: 0, y: -20 }}
                transition={{ delay: index * 0.05 }}
                className={`candidate-item ${
                  selectedCandidates.includes(candidate.id) ? 'selected' : ''
                }`}
              >
                {isSelectionMode && (
                  <input
                    type="checkbox"
                    checked={selectedCandidates.includes(candidate.id)}
                    onChange={() => toggleCandidateSelection(candidate.id)}
                    className="candidate-checkbox"
                  />
                )}
                <CandidateView
                  candidate={candidate}
                  onEdit={() => {
                    setEditingCandidate(candidate);
                    setShowEditModal(true);
                  }}
                  onDelete={() => handleDeleteCandidate(candidate.id)}
                  onSendMessage={() => handleSendMessage(candidate)}
                />
              </motion.div>
            ))}
          </AnimatePresence>
        ) : (
          <div className="empty-state">
            <Users size={64} className="empty-icon" />
            <h3>–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</h3>
            <p>
              {searchQuery || selectedProject !== 'all' || selectedStatus !== 'all'
                ? '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞'
                : '–î–æ–±–∞–≤—å—Ç–µ –ø–µ—Ä–≤–æ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞'}
            </p>
            {candidates.length === 0 && (
              <Button
                variant="primary"
                onClick={() => setShowAddModal(true)}
              >
                <Plus size={20} />
                –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
              </Button>
            )}
          </div>
        )}
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è */}
      {showAddModal && (
        <Modal
          title="–ù–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç"
          onClose={() => setShowAddModal(false)}
          size="lg"
        >
          <CandidateForm
            onSubmit={handleAddCandidate}
            onCancel={() => setShowAddModal(false)}
          />
        </Modal>
      )}

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è */}
      {showEditModal && editingCandidate && (
        <Modal
          title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞"
          onClose={() => {
            setShowEditModal(false);
            setEditingCandidate(null);
          }}
          size="lg"
        >
          <CandidateForm
            candidate={editingCandidate}
            onSubmit={handleEditCandidate}
            onCancel={() => {
              setShowEditModal(false);
              setEditingCandidate(null);
            }}
          />
        </Modal>
      )}
    </div>
  );
};

export default CandidatesPage;
