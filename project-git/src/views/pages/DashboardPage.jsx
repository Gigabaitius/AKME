// src/views/pages/DashboardPage.jsx
/**
 * üìä –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞
 * @description –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
 */
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { 
  Users, 
  Volume2, 
  SendHorizontal, 
  TrendingUp,
  Clock,
  CheckCircle,
  AlertCircle,
  Activity,
  BarChart3,
  Calendar,
  Target,
  MessageCircle
} from 'lucide-react';
import { motion } from 'framer-motion';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import StatCard from '@components/features/StatCard';
import CandidateView from '@components/features/CandidateView';
import Button from '@components/common/Button';

// –£—Ç–∏–ª–∏—Ç—ã
import EventBus from '@utils/EventBus';
import Logger from '@utils/Logger';
import { formatDate } from '@utils/dateHelpers';

// –°—Ç–∏–ª–∏
import './DashboardPage.css';

const logger = new Logger('DashboardPage');

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞
 * @returns {JSX.Element} –°—Ç—Ä–∞–Ω–∏—Ü–∞ –¥–∞—à–±–æ—Ä–¥–∞
 */
const DashboardPage = () => {
  const navigate = useNavigate();
  
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [stats, setStats] = useState({
    totalCandidates: 0,
    activeCandidates: 0,
    silentCandidates: 0,
    transferredCandidates: 0,
    shiftWorkers: 0,
    unreadChats: 0,
    botReplies: 0,
    todayMessages: 0,
    conversionRate: 0
  });

  const [recentCandidates, setRecentCandidates] = useState([]);
  const [recentActivities, setRecentActivities] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadDashboardData();
    
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const handleStatsUpdate = (newStats) => {
      setStats(prevStats => ({ ...prevStats, ...newStats }));
    };

    const handleCandidateUpdate = () => {
      loadRecentCandidates();
    };

    EventBus.on('dashboard:statsUpdated', handleStatsUpdate);
    EventBus.on('candidate:updated', handleCandidateUpdate);
    EventBus.on('candidate:created', handleCandidateUpdate);

    return () => {
      EventBus.off('dashboard:statsUpdated', handleStatsUpdate);
      EventBus.off('candidate:updated', handleCandidateUpdate);
      EventBus.off('candidate:created', handleCandidateUpdate);
    };
  }, []);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞
  const loadDashboardData = async () => {
    try {
      setIsLoading(true);
      
      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ localStorage
      const storedData = localStorage.getItem('hr-assistant-data');
      if (storedData) {
        const data = JSON.parse(storedData);
        
        // –ü–æ–¥—Å—á–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
        const candidates = data.candidates || [];
        const silentCandidates = data.silentCandidates || [];
        const transferredCandidates = data.transferredCandidates || [];
        const shiftWorkers = data.shiftWorkers || [];
        
        setStats({
          totalCandidates: candidates.length,
          activeCandidates: candidates.filter(c => c.status === '–ê–∫—Ç–∏–≤–µ–Ω').length,
          silentCandidates: silentCandidates.length,
          transferredCandidates: transferredCandidates.length,
          shiftWorkers: shiftWorkers.length,
          unreadChats: Math.floor(Math.random() * 50) + 10, // –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
          botReplies: Math.floor(Math.random() * 100) + 50,
          todayMessages: Math.floor(Math.random() * 200) + 100,
          conversionRate: Math.floor(Math.random() * 30) + 15
        });
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
        const allCandidates = [...candidates, ...silentCandidates, ...transferredCandidates];
        const recent = allCandidates
          .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
          .slice(0, 5);
        setRecentCandidates(recent);
        
        // –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        loadRecentActivities();
      }
      
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö –¥–∞—à–±–æ—Ä–¥–∞', error);
      EventBus.emit('notification:error', '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö');
    } finally {
      setIsLoading(false);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
  const loadRecentCandidates = async () => {
    try {
      const storedData = localStorage.getItem('hr-assistant-data');
      if (storedData) {
        const data = JSON.parse(storedData);
        const allCandidates = [
          ...(data.candidates || []),
          ...(data.silentCandidates || []),
          ...(data.transferredCandidates || [])
        ];
        
        const recent = allCandidates
          .sort((a, b) => new Date(b.createdAt) - new Date(a.createdAt))
          .slice(0, 5);
        
        setRecentCandidates(recent);
      }
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤', error);
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
  const loadRecentActivities = () => {
    // –ú–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π
    const activities = [
      {
        id: 1,
        type: 'candidate_added',
        message: '–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π –∫–∞–Ω–¥–∏–¥–∞—Ç –ò–≤–∞–Ω –ò–≤–∞–Ω–æ–≤',
        timestamp: new Date(Date.now() - 1000 * 60 * 5),
        icon: <Users size={16} />,
        color: 'success'
      },
      {
        id: 2,
        type: 'message_sent',
        message: '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—É –ü–µ—Ç—Ä –ü–µ—Ç—Ä–æ–≤',
        timestamp: new Date(Date.now() - 1000 * 60 * 15),
        icon: <MessageCircle size={16} />,
        color: 'info'
      },
      {
        id: 3,
        type: 'candidate_silent',
        message: '–ö–∞–Ω–¥–∏–¥–∞—Ç –ú–∞—Ä–∏—è –°–∏–¥–æ—Ä–æ–≤–∞ –ø–µ—Ä–µ—à–ª–∞ –≤ —Å—Ç–∞—Ç—É—Å "–ú–æ–ª—á–∏—Ç"',
        timestamp: new Date(Date.now() - 1000 * 60 * 30),
        icon: <Volume2 size={16} />,
        color: 'warning'
      },
      {
        id: 4,
        type: 'checkpoint_missed',
        message: '–í–∞—Ö—Ç–æ–≤–∏–∫ –ê–ª–µ–∫—Å–µ–π –ø—Ä–æ–ø—É—Å—Ç–∏–ª –∫–æ–Ω—Ç—Ä–æ–ª—å–Ω—É—é —Ç–æ—á–∫—É',
        timestamp: new Date(Date.now() - 1000 * 60 * 45),
        icon: <AlertCircle size={16} />,
        color: 'error'
      },
      {
        id: 5,
        type: 'candidate_transferred',
        message: '–ö–∞–Ω–¥–∏–¥–∞—Ç –û–ª—å–≥–∞ –°–º–∏—Ä–Ω–æ–≤–∞ –ø–µ—Ä–µ–¥–∞–Ω–∞ –Ω–∞ 1-—é –ª–∏–Ω–∏—é',
        timestamp: new Date(Date.now() - 1000 * 60 * 60),
        icon: <SendHorizontal size={16} />,
        color: 'warning'
      }
    ];
    
    setRecentActivities(activities);
  };

  // –ù–∞–≤–∏–≥–∞—Ü–∏—è –∫ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
  const navigateToPage = (page) => {
    navigate(`/${page}`);
  };

  // –ê–Ω–∏–º–∞—Ü–∏—è –¥–ª—è –∫–∞—Ä—Ç–æ—á–µ–∫
  const cardVariants = {
    hidden: { opacity: 0, y: 20 },
    visible: { opacity: 1, y: 0 }
  };

  if (isLoading) {
    return (
      <div className="dashboard-loading">
        <div className="loading-spinner"></div>
        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞—à–±–æ—Ä–¥–∞...</p>
      </div>
    );
  }

  return (
    <div className="dashboard-page">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã */}
      <div className="page-header">
        <h1 className="page-title">–î–∞—à–±–æ—Ä–¥</h1>
        <p className="page-subtitle">
          –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ HR Assistant! –í–æ—Ç –∫—Ä–∞—Ç–∫–∞—è —Å–≤–æ–¥–∫–∞ –ø–æ –≤–∞—à–µ–π —Ä–∞–±–æ—Ç–µ.
        </p>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ */}
      <div className="stats-grid">
        <motion.div
          variants={cardVariants}
          initial="hidden"
          animate="visible"
          transition={{ delay: 0.1 }}
        >
          <StatCard
            title="–í—Å–µ–≥–æ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤"
            value={stats.totalCandidates}
            icon={<Users size={24} />}
            trend={+12}
            color="primary"
            onClick={() => navigateToPage('candidates')}
          />
        </motion.div>

        <motion.div
          variants={cardVariants}
          initial="hidden"
          animate="visible"
          transition={{ delay: 0.2 }}
        >
          <StatCard
            title="–ú–æ–ª—á–∞—Ç"
            value={stats.silentCandidates}
            icon={<Volume2 size={24} />}
            trend={-5}
            color="warning"
            onClick={() => navigateToPage('silent')}
          />
        </motion.div>

        <motion.div
          variants={cardVariants}
          initial="hidden"
          animate="visible"
          transition={{ delay: 0.3 }}
        >
          <StatCard
            title="–ü–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞ 1-—é"
            value={stats.transferredCandidates}
            icon={<SendHorizontal size={24} />}
            trend={+3}
            color="info"
            onClick={() => navigateToPage('transferred')}
          />
        </motion.div>

        <motion.div
          variants={cardVariants}
          initial="hidden"
          animate="visible"
          transition={{ delay: 0.4 }}
        >
          <StatCard
            title="–í–∞—Ö—Ç–æ–≤–∏–∫–∏"
            value={stats.shiftWorkers}
            icon={<Target size={24} />}
            trend={0}
            color="success"
            onClick={() => navigateToPage('shift-workers')}
          />
        </motion.div>
      </div>

      {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏ */}
      <div className="metrics-row">
        <motion.div
          className="metric-card"
          variants={cardVariants}
          initial="hidden"
          animate="visible"
          transition={{ delay: 0.5 }}
        >
          <div className="metric-icon">
            <MessageCircle size={32} />
          </div>
          <div className="metric-content">
            <h3>–ù–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤</h3>
            <p className="metric-value">{stats.unreadChats}</p>
            <span className="metric-label">—Ç—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è</span>
          </div>
        </motion.div>

        <motion.div
          className="metric-card"
          variants={cardVariants}
          initial="hidden"
          animate="visible"
          transition={{ delay: 0.6 }}
        >
          <div className="metric-icon">
            <Activity size={32} />
          </div>
          <div className="metric-content">
            <h3>–°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è</h3>
            <p className="metric-value">{stats.todayMessages}</p>
            <span className="metric-label">–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ</span>
          </div>
        </motion.div>

        <motion.div
          className="metric-card"
          variants={cardVariants}
          initial="hidden"
          animate="visible"
          transition={{ delay: 0.7 }}
        >
          <div className="metric-icon">
            <TrendingUp size={32} />
          </div>
          <div className="metric-content">
            <h3>–ö–æ–Ω–≤–µ—Ä—Å–∏—è</h3>
            <p className="metric-value">{stats.conversionRate}%</p>
            <span className="metric-label">–∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ –¥–æ–≤–µ–¥–µ–Ω—ã</span>
          </div>
        </motion.div>
      </div>

      <div className="dashboard-content">
        {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã */}
        <motion.div
          className="recent-section"
          variants={cardVariants}
          initial="hidden"
          animate="visible"
          transition={{ delay: 0.8 }}
        >
          <div className="section-header">
            <h2 className="section-title">
              <Users size={20} />
              –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∫–∞–Ω–¥–∏–¥–∞—Ç—ã
            </h2>
            <Button
              variant="secondary"
              size="sm"
              onClick={() => navigateToPage('candidates')}
            >
              –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ—Ö
            </Button>
          </div>
          
          <div className="candidates-list">
            {recentCandidates.length > 0 ? (
              recentCandidates.map(candidate => (
                <CandidateView
                  key={candidate.id}
                  candidate={candidate}
                  onEdit={() => EventBus.emit('candidate:edit', candidate)}
                  onDelete={() => EventBus.emit('candidate:delete', candidate.id)}
                  onSendMessage={() => EventBus.emit('whatsapp:sendMessage', candidate)}
                />
              ))
            ) : (
              <div className="empty-state">
                <Users size={48} className="empty-icon" />
                <p>–ù–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤</p>
                <Button
                  variant="primary"
                  onClick={() => navigateToPage('candidates')}
                >
                  –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
                </Button>
              </div>
            )}
          </div>
        </motion.div>

        {/* –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ */}
        <motion.div
          className="activity-section"
          variants={cardVariants}
          initial="hidden"
          animate="visible"
          transition={{ delay: 0.9 }}
        >
          <div className="section-header">
            <h2 className="section-title">
              <Activity size={20} />
              –ü–æ—Å–ª–µ–¥–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            </h2>
            <Button
              variant="secondary"
              size="sm"
              onClick={() => navigateToPage('activities')}
            >
              –í—Å–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
            </Button>
          </div>
          
          <div className="activity-list">
            {recentActivities.map(activity => (
              <div key={activity.id} className={`activity-item ${activity.color}`}>
                <div className="activity-icon">
                  {activity.icon}
                </div>
                <div className="activity-content">
                  <p className="activity-message">{activity.message}</p>
                  <span className="activity-time">
                    {formatDate(activity.timestamp, 'relative')}
                  </span>
                </div>
              </div>
            ))}
          </div>
        </motion.div>
      </div>

      {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
      <motion.div
        className="quick-actions"
        variants={cardVariants}
        initial="hidden"
        animate="visible"
        transition={{ delay: 1.0 }}
      >
        <h2 className="section-title">–ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è</h2>
        <div className="actions-grid">
          <Button
            variant="primary"
            onClick={() => EventBus.emit('candidate:addNew')}
          >
            <Users size={20} />
            –î–æ–±–∞–≤–∏—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
          </Button>
          
          <Button
            variant="secondary"
            onClick={() => navigateToPage('training')}
          >
            <MessageCircle size={20} />
            –û–±—É—á–∏—Ç—å GPT
          </Button>
          
          <Button
            variant="secondary"
            onClick={() => navigateToPage('mailings')}
          >
            <SendHorizontal size={20} />
            –°–æ–∑–¥–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É
          </Button>
          
          <Button
            variant="secondary"
            onClick={() => EventBus.emit('data:export')}
          >
            <BarChart3 size={20} />
            –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
          </Button>
        </div>
      </motion.div>
    </div>
  );
};

export default DashboardPage;
