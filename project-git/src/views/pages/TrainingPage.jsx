// src/views/pages/TrainingPage.jsx
/**
 * ü§ñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—É—á–µ–Ω–∏—è GPT
 * @description –ß–∞—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ò–ò —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –∏—Å—Ç–æ—Ä–∏–∏
 */
import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { 
  Send, 
  Bot, 
  User,
  Download,
  Upload,
  Trash2,
  Save,
  FileText,
  Clock,
  MessageCircle,
  AlertCircle,
  Loader
} from 'lucide-react';

// –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
import Button from '@components/common/Button';
import Modal from '@components/common/Modal';

// –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—ã –∏ —É—Ç–∏–ª–∏—Ç—ã
import TrainingController from '@controllers/TrainingController';
import EventBus from '@utils/EventBus';
import Logger from '@utils/Logger';
import { formatDate } from '@utils/dateHelpers';

// –°—Ç–∏–ª–∏
import './TrainingPage.css';

const logger = new Logger('TrainingPage');

/**
 * –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—É—á–µ–Ω–∏—è GPT
 * @returns {JSX.Element} –°—Ç—Ä–∞–Ω–∏—Ü–∞ –æ–±—É—á–µ–Ω–∏—è
 */
const TrainingPage = () => {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [messages, setMessages] = useState([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isTyping, setIsTyping] = useState(false);
  const [showUploadModal, setShowUploadModal] = useState(false);
  const [trainingStats, setTrainingStats] = useState({
    totalMessages: 0,
    userMessages: 0,
    botMessages: 0,
    sessionDuration: 0
  });
  
  // –†–µ—Ñ—ã
  const messagesEndRef = useRef(null);
  const inputRef = useRef(null);
  const fileInputRef = useRef(null);
  
  // –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä
  const [controller] = useState(() => new TrainingController());

  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    loadChatHistory();
    
    // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è
    const handleMessageAdded = (message) => {
      setMessages(prev => [...prev, message]);
      updateStats();
    };
    
    const handleHistoryCleared = () => {
      setMessages([]);
      updateStats();
    };

    EventBus.on('training:messageAdded', handleMessageAdded);
    EventBus.on('training:historyCleared', handleHistoryCleared);

    return () => {
      EventBus.off('training:messageAdded', handleMessageAdded);
      EventBus.off('training:historyCleared', handleHistoryCleared);
    };
  }, []);

  // –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –ø—Ä–∏ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —á–∞—Ç–∞
  const loadChatHistory = () => {
    const history = controller.getChatHistory();
    setMessages(history);
    updateStats();
  };

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  const updateStats = () => {
    const stats = controller.getTrainingStatistics();
    setTrainingStats(stats);
  };

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
  const handleSendMessage = async (e) => {
    e?.preventDefault();
    
    if (!inputMessage.trim() || isLoading) return;
    
    const message = inputMessage.trim();
    setInputMessage('');
    setIsLoading(true);
    setIsTyping(true);
    
    try {
      await controller.sendMessage(message);
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è', error);
      EventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ');
    } finally {
      setIsLoading(false);
      setIsTyping(false);
    }
  };

  // –û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
  const handleClearHistory = () => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —á–∞—Ç–∞?')) {
      controller.clearChatHistory();
      EventBus.emit('notification:success', '–ò—Å—Ç–æ—Ä–∏—è —á–∞—Ç–∞ –æ—á–∏—â–µ–Ω–∞');
    }
  };

  // –≠–∫—Å–ø–æ—Ä—Ç –∏—Å—Ç–æ—Ä–∏–∏
  const handleExportHistory = () => {
    try {
      const csv = controller.exportChatHistory();
      const blob = new Blob([csv], { type: 'text/csv;charset=utf-8;' });
      const link = document.createElement('a');
      link.href = URL.createObjectURL(blob);
      link.download = `training_history_${new Date().toISOString().split('T')[0]}.csv`;
      link.click();
      
      EventBus.emit('notification:success', '–ò—Å—Ç–æ—Ä–∏—è —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞', error);
      EventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é');
    }
  };

  // –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è
  const handleFileUpload = async (event) => {
    const file = event.target.files[0];
    if (!file) return;
    
    try {
      setIsLoading(true);
      await controller.uploadTrainingFile(file);
      setShowUploadModal(false);
      EventBus.emit('notification:success', '–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω –¥–ª—è –æ–±—É—á–µ–Ω–∏—è');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞', error);
      EventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª');
    } finally {
      setIsLoading(false);
    }
  };

  // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
  const handleSaveToKnowledge = async (message) => {
    try {
      await controller.saveToKnowledgeBase(message);
      EventBus.emit('notification:success', '–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π');
    } catch (error) {
      logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è', error);
      EventBus.emit('notification:error', '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π');
    }
  };

  // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
  const formatMessage = (content) => {
    // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    return content
      .split('\n')
      .map((line, index) => (
        <React.Fragment key={index}>
          {line}
          {index < content.split('\n').length - 1 && <br />}
        </React.Fragment>
      ));
  };

  return (
    <div className="training-page">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="page-header">
        <div className="header-content">
          <h1 className="page-title">–û–±—É—á–µ–Ω–∏–µ GPT</h1>
          <p className="page-subtitle">
            –ß–∞—Ç –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ò–ò ‚Ä¢ {messages.length} —Å–æ–æ–±—â–µ–Ω–∏–π
          </p>
        </div>
        
        <div className="header-actions">
          <Button
            variant="secondary"
            onClick={() => setShowUploadModal(true)}
          >
            <Upload size={20} />
            –ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª
          </Button>
          
          <Button
            variant="secondary"
            onClick={handleExportHistory}
            disabled={messages.length === 0}
          >
            <Download size={20} />
            –≠–∫—Å–ø–æ—Ä—Ç
          </Button>
          
          <Button
            variant="danger"
            onClick={handleClearHistory}
            disabled={messages.length === 0}
          >
            <Trash2 size={20} />
            –û—á–∏—Å—Ç–∏—Ç—å
          </Button>
        </div>
      </div>

      {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="training-stats">
        <div className="stat-item">
          <MessageCircle size={20} />
          <span className="stat-value">{trainingStats.totalMessages}</span>
          <span className="stat-label">–í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π</span>
        </div>
        
        <div className="stat-item">
          <User size={20} />
          <span className="stat-value">{trainingStats.userMessages}</span>
          <span className="stat-label">–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</span>
        </div>
        
        <div className="stat-item">
          <Bot size={20} />
          <span className="stat-value">{trainingStats.botMessages}</span>
          <span className="stat-label">–û—Ç –±–æ—Ç–∞</span>
        </div>
        
        <div className="stat-item">
          <Clock size={20} />
          <span className="stat-value">{trainingStats.sessionDuration}</span>
          <span className="stat-label">–º–∏–Ω. —Å–µ—Å—Å–∏–∏</span>
        </div>
      </div>

      {/* –ß–∞—Ç */}
      <div className="chat-container">
        <div className="messages-area">
          {messages.length === 0 ? (
            <div className="empty-chat">
              <Bot size={64} className="empty-icon" />
              <h3>–ù–∞—á–Ω–∏—Ç–µ –æ–±—É—á–µ–Ω–∏–µ</h3>
              <p>
                –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–π—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –ò–ò.
                –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
              </p>
            </div>
          ) : (
            <AnimatePresence>
              {messages.map((message, index) => (
                <motion.div
                  key={message.id}
                  className={`message message-${message.type}`}
                  initial={{ opacity: 0, y: 20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.05 }}
                >
                  <div className="message-avatar">
                    {message.type === 'user' ? (
                      <User size={20} />
                    ) : (
                      <Bot size={20} />
                    )}
                  </div>
                  
                  <div className="message-content">
                    <div className="message-header">
                      <span className="message-author">
                        {message.type === 'user' ? '–í—ã' : 'GPT Assistant'}
                      </span>
                      <span className="message-time">
                        {formatDate(message.timestamp, 'time')}
                      </span>
                    </div>
                    
                    <div className="message-text">
                      {formatMessage(message.content)}
                    </div>
                    
                    {message.type === 'bot' && (
                      <div className="message-actions">
                        <button
                          className="message-action"
                          onClick={() => handleSaveToKnowledge(message)}
                          title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤ –±–∞–∑—É –∑–Ω–∞–Ω–∏–π"
                        >
                          <Save size={16} />
                        </button>
                      </div>
                    )}
                  </div>
                </motion.div>
              ))}
            </AnimatePresence>
          )}
          
          {isTyping && (
            <motion.div
              className="typing-indicator"
              initial={{ opacity: 0 }}
              animate={{ opacity: 1 }}
            >
              <Bot size={20} />
              <div className="typing-dots">
                <span></span>
                <span></span>
                <span></span>
              </div>
            </motion.div>
          )}
          
          <div ref={messagesEndRef} />
        </div>

        {/* –§–æ—Ä–º–∞ –≤–≤–æ–¥–∞ */}
        <form className="chat-input-form" onSubmit={handleSendMessage}>
          <div className="input-wrapper">
            <input
              ref={inputRef}
              type="text"
              value={inputMessage}
              onChange={(e) => setInputMessage(e.target.value)}
              placeholder="–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è..."
              disabled={isLoading}
              className="chat-input"
            />
            
            <Button
              type="submit"
              variant="primary"
              disabled={!inputMessage.trim() || isLoading}
              loading={isLoading}
            >
              <Send size={20} />
            </Button>
          </div>
          
          <div className="input-hint">
            <AlertCircle size={14} />
            <span>
              –ò—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –∏ –Ω–µ –æ—á–∏—â–∞–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
            </span>
          </div>
        </form>
      </div>

      {/* –ú–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞ */}
      {showUploadModal && (
        <Modal
          title="–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª –¥–ª—è –æ–±—É—á–µ–Ω–∏—è"
          onClose={() => setShowUploadModal(false)}
          size="md"
        >
          <div className="upload-modal">
            <div className="upload-info">
              <FileText size={48} className="upload-icon" />
              <p>
                –ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª, PDF –∏–ª–∏ –¥–æ–∫—É–º–µ–Ω—Ç —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –¥–ª—è –æ–±—É—á–µ–Ω–∏—è GPT.
                –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: .txt, .pdf, .doc, .docx
              </p>
            </div>
            
            <input
              ref={fileInputRef}
              type="file"
              accept=".txt,.pdf,.doc,.docx"
              onChange={handleFileUpload}
              hidden
            />
            
            <div className="upload-actions">
              <Button
                variant="primary"
                onClick={() => fileInputRef.current?.click()}
                loading={isLoading}
              >
                <Upload size={20} />
                –í—ã–±—Ä–∞—Ç—å —Ñ–∞–π–ª
              </Button>
              
              <Button
                variant="secondary"
                onClick={() => setShowUploadModal(false)}
                disabled={isLoading}
              >
                –û—Ç–º–µ–Ω–∞
              </Button>
            </div>
          </div>
        </Modal>
      )}
    </div>
  );
};

export default TrainingPage;
