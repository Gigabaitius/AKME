// src/models/CandidateModel.js
/**
 * üë§ –ú–æ–¥–µ–ª—å –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
 * @description –ü—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞ –≤ —Å–∏—Å—Ç–µ–º–µ HR
 */
import BaseModel from './BaseModel';
import ValidationModel from './ValidationModel';

class CandidateModel extends BaseModel {
  initialize(data) {
    // –û—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    this.name = data.name || '';
    this.phone = data.phone || '';
    this.email = data.email || '';
    this.project = data.project || '';
    
    // –î–æ–∫—É–º–µ–Ω—Ç—ã
    this.inn = data.inn || null;
    this.snils = data.snils || null;
    this.passport = data.passport || null;
    this.birthDate = data.birthDate || null;
    this.passportIssueDate = data.passportIssueDate || null;
    this.passportIssuedBy = data.passportIssuedBy || null;
    this.birthPlace = data.birthPlace || null;
    this.registrationAddress = data.registrationAddress || null;
    
    // –°—Ç–∞—Ç—É—Å –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
    this.status = data.status || '–ù–æ–≤—ã–π';
    this.lastReply = data.lastReply || null;
    this.lastActivity = data.lastActivity || null;
    this.chatId = data.chatId || null;
    
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    this.documentProcessed = data.documentProcessed || false;
    this.documentError = data.documentError || null;
    this.documentQuality = data.documentQuality || null;
    this.ocrAttempts = data.ocrAttempts || 0;
    
    // –ü–æ–ª—è –¥–ª—è –º–æ–ª—á–∞—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    this.silentSince = data.silentSince || null;
    this.smsAttempts = data.smsAttempts || 0;
    this.lastSmsDate = data.lastSmsDate || null;
    this.transferredAt = data.transferredAt || null;
    this.transferReason = data.transferReason || null;
    
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    this.comment = data.comment || '';
    this.tags = data.tags || [];
    this.priority = data.priority || 'normal';
    this.source = data.source || 'manual';
    
    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    this.stats = {
      messagesCount: 0,
      documentsUploaded: 0,
      responseTime: null,
      ...data.stats
    };
  }

  validate() {
    super.validate();
    
    const validator = new ValidationModel();
    
    if (!validator.isRequired(this.name)) {
      throw new Error('–§–ò–û –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
    }
    
    if (!validator.isRequired(this.phone)) {
      throw new Error('–¢–µ–ª–µ—Ñ–æ–Ω –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è');
    }
    
    if (!validator.isPhone(this.phone)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
    }
    
    if (this.email && !validator.isEmail(this.email)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email');
    }
    
    if (this.inn && !validator.isINN(this.inn)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ò–ù–ù');
    }
    
    if (this.snils && !validator.isSNILS(this.snils)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –°–ù–ò–õ–°');
    }
    
    if (this.birthDate && !validator.isValidAge(this.birthDate, 16, 70)) {
      throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç –∫–∞–Ω–¥–∏–¥–∞—Ç–∞');
    }
    
    if (!this.isValidStatus(this.status)) {
      throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å: ${this.status}`);
    }
    
    if (!this.isValidPriority(this.priority)) {
      throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${this.priority}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ —Å—Ç–∞—Ç—É—Å–∞
   * @param {string} status - –°—Ç–∞—Ç—É—Å –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns {boolean} –í–∞–ª–∏–¥–µ–Ω –ª–∏ —Å—Ç–∞—Ç—É—Å
   */
  isValidStatus(status) {
    const validStatuses = [
      '–ù–æ–≤—ã–π', '–ê–∫—Ç–∏–≤–µ–Ω', '–ú–æ–ª—á–∏—Ç', '–ü–µ—Ä–µ–¥–∞–Ω', 
      '–î–æ–≤–µ–¥–µ–Ω', '–û—Ç–∫–∞–∑', '–ê—Ä—Ö–∏–≤', '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω'
    ];
    return validStatuses.includes(status);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   * @param {string} priority - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
   * @returns {boolean} –í–∞–ª–∏–¥–µ–Ω –ª–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
   */
  isValidPriority(priority) {
    const validPriorities = ['low', 'normal', 'high', 'urgent'];
    return validPriorities.includes(priority);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞, –º–æ–ª—á–∏—Ç –ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç
   * @param {number} hours - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —á–∞—Å–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 8)
   * @returns {boolean} –ú–æ–ª—á–∏—Ç –ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç
   */
  isSilent(hours = 8) {
    if (!this.lastReply || this.status === '–ú–æ–ª—á–∏—Ç') return false;
    
    const now = new Date();
    const lastReply = new Date(this.lastReply);
    const diffHours = (now - lastReply) / (1000 * 60 * 60);
    
    return diffHours >= hours && this.status === '–ê–∫—Ç–∏–≤–µ–Ω';
  }

  /**
   * –ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–∞ 1-—é –ª–∏–Ω–∏—é
   * @returns {boolean} –ù—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å
   */
  shouldTransfer() {
    if (!this.silentSince || this.status !== '–ú–æ–ª—á–∏—Ç') return false;
    
    const now = new Date();
    const silentSince = new Date(this.silentSince);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –≤—Ä–µ–º—è –¥–æ 18:30 —Å–ª–µ–¥—É—é—â–µ–≥–æ –¥–Ω—è
    const nextDay = new Date(silentSince);
    nextDay.setDate(nextDay.getDate() + 1);
    nextDay.setHours(18, 30, 0, 0);
    
    return now >= nextDay;
  }

  /**
   * –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
   * @param {string} newStatus - –ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å
   * @param {string} reason - –ü—Ä–∏—á–∏–Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
   * @param {string} changedBy - –ö—Ç–æ –∏–∑–º–µ–Ω–∏–ª
   */
  changeStatus(newStatus, reason = '', changedBy = 'system') {
    if (!this.isValidStatus(newStatus)) {
      throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å: ${newStatus}`);
    }
    
    const oldStatus = this.status;
    this.status = newStatus;
    
    // –õ–æ–≥–∏–∫–∞ –¥–ª—è —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤
    if (newStatus === '–ú–æ–ª—á–∏—Ç' && !this.silentSince) {
      this.silentSince = new Date().toISOString();
    }
    
    if (newStatus === '–ü–µ—Ä–µ–¥–∞–Ω' && !this.transferredAt) {
      this.transferredAt = new Date().toISOString();
      this.transferReason = reason;
    }
    
    if (newStatus === '–ê–∫—Ç–∏–≤–µ–Ω' && oldStatus === '–ú–æ–ª—á–∏—Ç') {
      this.silentSince = null;
    }
    
    if (newStatus === '–î–æ–≤–µ–¥–µ–Ω') {
      this.completedAt = new Date().toISOString();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–æ–¥–µ–ª—å
    this.update({
      status: newStatus,
      statusHistory: (this.statusHistory || []).concat({
        from: oldStatus,
        to: newStatus,
        reason,
        timestamp: new Date().toISOString(),
        changedBy
      })
    }, changedBy);
    
    this.logger.info(`–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω: ${oldStatus} ‚Üí ${newStatus}`, {
      candidateId: this.id,
      reason,
      changedBy
    });
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {string} activityType - –¢–∏–ø –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
   * @param {Object} data - –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  updateActivity(activityType, data = {}) {
    this.lastActivity = new Date().toISOString();
    
    if (activityType === 'reply') {
      this.lastReply = this.lastActivity;
      this.stats.messagesCount++;
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    if (!this.activityHistory) {
      this.activityHistory = [];
    }
    
    this.activityHistory.push({
      type: activityType,
      timestamp: this.lastActivity,
      data
    });
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏
    if (this.activityHistory.length > 100) {
      this.activityHistory = this.activityHistory.slice(-100);
    }
    
    this.update({ lastActivity: this.lastActivity });
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
   * @param {string} comment - –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π
   * @param {string} author - –ê–≤—Ç–æ—Ä –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è
   */
  addComment(comment, author = 'system') {
    const timestamp = new Date().toISOString();
    const newComment = `[${new Date().toLocaleString('ru-RU')}] ${author}: ${comment}`;
    
    this.comment = this.comment ? `${this.comment}\n${newComment}` : newComment;
    
    this.update({ comment: this.comment }, author);
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ OCR
   * @param {Object} ocrData - –î–∞–Ω–Ω—ã–µ –∏–∑ OCR
   * @param {number} quality - –ö–∞—á–µ—Å—Ç–≤–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è (0-100)
   */
  updateFromOCR(ocrData, quality = null) {
    const updates = {};
    
    if (ocrData.fullName && !this.name) {
      updates.name = ocrData.fullName;
    }
    
    if (ocrData.passport) {
      updates.passport = ocrData.passport;
    }
    
    if (ocrData.inn) {
      updates.inn = ocrData.inn;
    }
    
    if (ocrData.snils) {
      updates.snils = ocrData.snils;
    }
    
    if (ocrData.birthDate) {
      updates.birthDate = ocrData.birthDate;
    }
    
    if (ocrData.issueDate) {
      updates.passportIssueDate = ocrData.issueDate;
    }
    
    if (ocrData.issuedBy) {
      updates.passportIssuedBy = ocrData.issuedBy;
    }
    
    if (ocrData.birthPlace) {
      updates.birthPlace = ocrData.birthPlace;
    }
    
    updates.documentProcessed = true;
    updates.documentError = null;
    updates.documentQuality = quality;
    updates.ocrAttempts = this.ocrAttempts + 1;
    
    this.update(updates);
    this.updateActivity('ocr_processed', { quality, extractedFields: Object.keys(updates) });
    
    this.logger.info('–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã –∏–∑ OCR', {
      candidateId: this.id,
      quality,
      extractedFields: Object.keys(updates)
    });
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ—à–∏–±–∫–∏ OCR
   * @param {string} error - –¢–µ–∫—Å—Ç –æ—à–∏–±–∫–∏
   */
  setOCRError(error) {
    this.update({
      documentProcessed: false,
      documentError: error,
      ocrAttempts: this.ocrAttempts + 1
    });
    
    this.updateActivity('ocr_error', { error });
    
    this.logger.warn('–û—à–∏–±–∫–∞ OCR –æ–±—Ä–∞–±–æ—Ç–∫–∏', {
      candidateId: this.id,
      error,
      attempts: this.ocrAttempts
    });
  }

  /**
   * –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–≥–∞
   * @param {string} tag - –¢–µ–≥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è
   */
  addTag(tag) {
    if (!this.tags.includes(tag)) {
      this.tags.push(tag);
      this.update({ tags: this.tags });
    }
  }

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–≥–∞
   * @param {string} tag - –¢–µ–≥ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
   */
  removeTag(tag) {
    this.tags = this.tags.filter(t => t !== tag);
    this.update({ tags: this.tags });
  }

  /**
   * –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞
   * @param {string} priority - –ù–æ–≤—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç
   */
  setPriority(priority) {
    if (!this.isValidPriority(priority)) {
      throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${priority}`);
    }
    
    this.update({ priority });
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç–≤–µ—Ç–∞
   * @returns {number|null} –í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
   */
  getResponseTime() {
    if (!this.lastReply || !this.createdAt) return null;
    
    const created = new Date(this.createdAt);
    const replied = new Date(this.lastReply);
    
    return Math.round((replied - created) / (1000 * 60));
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
   * @param {CandidateModel} other - –î—Ä—É–≥–æ–π –∫–∞–Ω–¥–∏–¥–∞—Ç
   * @returns {boolean} –Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ –¥—É–±–ª–∏–∫–∞—Ç–æ–º
   */
  isDuplicateOf(other) {
    if (!other || !(other instanceof CandidateModel)) return false;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É
    const cleanPhone1 = this.phone.replace(/\D/g, '');
    const cleanPhone2 = other.phone.replace(/\D/g, '');
    
    if (cleanPhone1 === cleanPhone2) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ò–ù–ù
    if (this.inn && other.inn && this.inn === other.inn) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –°–ù–ò–õ–°
    if (this.snils && other.snils && this.snils === other.snils) return true;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É
    if (this.passport && other.passport && this.passport === other.passport) return true;
    
    return false;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
   * @returns {Object} –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  getCompletionProgress() {
    const fields = [
      'name', 'phone', 'email', 'project',
      'inn', 'snils', 'passport', 'birthDate'
    ];
    
    const completed = fields.filter(field => this[field]).length;
    const total = fields.length;
    const percentage = Math.round((completed / total) * 100);
    
    return {
      completed,
      total,
      percentage,
      missingFields: fields.filter(field => !this[field])
    };
  }

  /**
   * –≠–∫—Å–ø–æ—Ä—Ç –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
   * @returns {Object} –î–∞–Ω–Ω—ã–µ –¥–ª—è API
   */
  toAPIFormat() {
    return {
      id: this.id,
      name: this.name,
      phone: this.phone,
      email: this.email,
      project: this.project,
      status: this.status,
      documents: {
        inn: this.inn,
        snils: this.snils,
        passport: this.passport,
        birthDate: this.birthDate,
        processed: this.documentProcessed,
        quality: this.documentQuality
      },
      activity: {
        lastReply: this.lastReply,
        lastActivity: this.lastActivity,
        responseTime: this.getResponseTime()
      },
      metadata: {
        createdAt: this.createdAt,
        updatedAt: this.updatedAt,
        source: this.source,
        priority: this.priority,
        tags: this.tags
      }
    };
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã –º–æ–¥–µ–ª–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–∞
   * @returns {Object} –°—Ö–µ–º–∞ –º–æ–¥–µ–ª–∏
   */
  static getSchema() {
    return {
      ...super.getSchema(),
      name: { type: 'string', required: true, minLength: 2, maxLength: 100 },
      phone: { type: 'string', required: true, pattern: '^\\+?[0-9\\s\\-\\(\\)]{10,} '},
      email: { type: 'string', format: 'email' },
      project: { type: 'string', required: true },
      inn: { type: 'string', pattern: '^\\d{12}' },
      snils: { type: 'string', pattern: '^\\d{3}-\\d{3}-\\d{3} \\d{2}' },
      passport: { type: 'string', pattern: '^\\d{4} \\d{6}' },
      status: { 
        type: 'string', 
        enum: ['–ù–æ–≤—ã–π', '–ê–∫—Ç–∏–≤–µ–Ω', '–ú–æ–ª—á–∏—Ç', '–ü–µ—Ä–µ–¥–∞–Ω', '–î–æ–≤–µ–¥–µ–Ω', '–û—Ç–∫–∞–∑', '–ê—Ä—Ö–∏–≤', '–ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω']
      },
      priority: {
        type: 'string',
        enum: ['low', 'normal', 'high', 'urgent']
      },
      tags: { type: 'array', items: { type: 'string' } }
    };
  }
}

export default CandidateModel;