// src/services/GoogleSheetsService.js
/**
 * üìä –°–µ—Ä–≤–∏—Å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å Google Sheets
 * @description –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Google –¢–∞–±–ª–∏—Ü–∞–º–∏
 */
import ExtensionAPIService from './ExtensionAPIService.js';
import EventBus from '../utils/EventBus.js';
import Logger from '../utils/Logger.js';

class GoogleSheetsService {
  constructor() {
    this.logger = new Logger('GoogleSheetsService');
    this.extensionAPI = ExtensionAPIService;
    this.spreadsheetId = null;
    this.isConnected = false;
    this.syncInProgress = false;
    
    this.initialize();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async initialize() {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
      const settings = JSON.parse(localStorage.getItem('hr-assistant-settings') || '{}');
      if (settings.googleSheetsConnected && settings.spreadsheetId) {
        this.spreadsheetId = settings.spreadsheetId;
        this.isConnected = await this.checkConnection();
      }
      
      this.logger.info('Google Sheets —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏', error);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   * @returns {Promise<boolean>} –°—Ç–∞—Ç—É—Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
   */
  async checkConnection() {
    try {
      if (!this.extensionAPI.isConnected()) {
        return false;
      }
      
      const result = await this.extensionAPI.checkGoogleSheetsAuth();
      return result.connected;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è', error);
      return false;
    }
  }

  /**
   * –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Ç–∞–±–ª–∏—Ü—ã
   * @param {string} title - –ù–∞–∑–≤–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
   * @returns {Promise<string>} ID —Å–æ–∑–¥–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
   */
  async createSpreadsheet(title = 'HR Assistant Data') {
    try {
      const result = await this.extensionAPI.createGoogleSheet({
        title,
        sheets: [
          { name: '–ö–∞–Ω–¥–∏–¥–∞—Ç—ã', headers: this.getCandidateHeaders() },
          { name: '–í–∞—Ö—Ç–æ–≤–∏–∫–∏', headers: this.getShiftWorkerHeaders() },
          { name: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', headers: this.getKnowledgeHeaders() },
          { name: '–ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è', headers: this.getTrainingHeaders() },
          { name: '–†–∞—Å—Å—ã–ª–∫–∏', headers: this.getMailingHeaders() }
        ]
      });
      
      if (result.success) {
        this.spreadsheetId = result.spreadsheetId;
        this.saveSpreadsheetId(result.spreadsheetId);
        this.logger.info(`–°–æ–∑–¥–∞–Ω–∞ —Ç–∞–±–ª–∏—Ü–∞: ${result.spreadsheetId}`);
        return result.spreadsheetId;
      } else {
        throw new Error(result.error || '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É');
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü—ã', error);
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ ID —Ç–∞–±–ª–∏—Ü—ã
   * @param {string} spreadsheetId - ID —Ç–∞–±–ª–∏—Ü—ã
   */
  saveSpreadsheetId(spreadsheetId) {
    const settings = JSON.parse(localStorage.getItem('hr-assistant-settings') || '{}');
    settings.spreadsheetId = spreadsheetId;
    localStorage.setItem('hr-assistant-settings', JSON.stringify(settings));
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
   */
  getCandidateHeaders() {
    return [
      'ID',
      '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
      '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
      '–§–ò–û',
      '–¢–µ–ª–µ—Ñ–æ–Ω',
      'Email',
      '–ü—Ä–æ–µ–∫—Ç',
      '–°—Ç–∞—Ç—É—Å',
      '–ò–ù–ù',
      '–°–ù–ò–õ–°',
      '–ü–∞—Å–ø–æ—Ä—Ç',
      '–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è',
      '–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è',
      '–ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏',
      '–î–∞—Ç–∞ –≤—ã–¥–∞—á–∏ –ø–∞—Å–ø–æ—Ä—Ç–∞',
      '–ö–µ–º –≤—ã–¥–∞–Ω –ø–∞—Å–ø–æ—Ä—Ç',
      '–ü–æ—Å–ª–µ–¥–Ω–∏–π –æ—Ç–≤–µ—Ç',
      '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
      '–¢–µ–≥–∏',
      '–ò—Å—Ç–æ—á–Ω–∏–∫'
    ];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
   */
  getShiftWorkerHeaders() {
    return [
      'ID',
      '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
      '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
      '–§–ò–û',
      '–¢–µ–ª–µ—Ñ–æ–Ω',
      '–û–±—ä–µ–∫—Ç',
      '–î–æ–ª–∂–Ω–æ—Å—Ç—å',
      '–°—Ç–∞—Ç—É—Å',
      '–¢–µ–∫—É—â–∞—è –ö–¢',
      '–î–∞—Ç–∞ –ö–¢',
      '–°—Ç–∞—Ç—É—Å –ö–¢',
      '–û—Ç–≤–µ—Ç –Ω–∞ –ö–¢',
      '–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –°–û',
      '–ì—Ä–∞—Ñ–∏–∫ –≤–∞—Ö—Ç—ã'
    ];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
   */
  getKnowledgeHeaders() {
    return [
      'ID',
      '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
      '–î–∞—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è',
      '–ó–∞–≥–æ–ª–æ–≤–æ–∫',
      '–ö–∞—Ç–µ–≥–æ—Ä–∏—è',
      '–°–æ–¥–µ—Ä–∂–∞–Ω–∏–µ',
      '–¢–µ–≥–∏',
      '–ò—Å—Ç–æ—á–Ω–∏–∫',
      '–í–µ—Ä—Å–∏—è',
      '–ü—Ä–æ—Å–º–æ—Ç—Ä—ã',
      '–ü–æ–ª–µ–∑–Ω–æ',
      '–ù–µ –ø–æ–ª–µ–∑–Ω–æ'
    ];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è –∏—Å—Ç–æ—Ä–∏–∏ –æ–±—É—á–µ–Ω–∏—è
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
   */
  getTrainingHeaders() {
    return [
      'ID',
      '–í—Ä–µ–º—è',
      '–¢–∏–ø',
      '–ê–≤—Ç–æ—Ä',
      '–°–æ–æ–±—â–µ–Ω–∏–µ',
      '–ö–∞—Ç–µ–≥–æ—Ä–∏—è'
    ];
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤ –¥–ª—è —Ä–∞—Å—Å—ã–ª–æ–∫
   * @returns {Array} –ú–∞—Å—Å–∏–≤ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
   */
  getMailingHeaders() {
    return [
      'ID',
      '–î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è',
      '–ù–∞–∑–≤–∞–Ω–∏–µ',
      '–°–æ–æ–±—â–µ–Ω–∏–µ',
      '–¶–µ–ª–µ–≤—ã–µ –≥—Ä—É–ø–ø—ã',
      '–ö–∞–Ω–∞–ª—ã',
      '–°—Ç–∞—Ç—É—Å',
      '–í—Å–µ–≥–æ –ø–æ–ª—É—á–∞—Ç–µ–ª–µ–π',
      '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
      '–û—à–∏–±–æ–∫',
      '–î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏'
    ];
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
   * @param {Array} candidates - –ú–∞—Å—Å–∏–≤ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async syncCandidates(candidates) {
    try {
      if (!this.isConnected || !this.spreadsheetId) {
        throw new Error('Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      }
      
      this.logger.info(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è ${candidates.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤`);
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç —Ç–∞–±–ª–∏—Ü—ã
      const rows = candidates.map(candidate => [
        candidate.id,
        candidate.createdAt,
        candidate.updatedAt,
        candidate.name,
        candidate.phone,
        candidate.email || '',
        candidate.project,
        candidate.status,
        candidate.inn || '',
        candidate.snils || '',
        candidate.passport || '',
        candidate.birthDate || '',
        candidate.birthPlace || '',
        candidate.registrationAddress || '',
        candidate.passportIssueDate || '',
        candidate.passportIssuedBy || '',
        candidate.lastReply || '',
        candidate.comment || '',
        (candidate.tags || []).join(', '),
        candidate.source || 'manual'
      ]);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
      const result = await this.extensionAPI.updateGoogleSheet({
        spreadsheetId: this.spreadsheetId,
        range: '–ö–∞–Ω–¥–∏–¥–∞—Ç—ã!A2:T',
        values: rows,
        clearFirst: true
      });
      
      if (result.success) {
        this.logger.info(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${result.updatedRows} —Å—Ç—Ä–æ–∫`);
        EventBus.emit('googleSheets:syncCompleted', {
          type: 'candidates',
          count: result.updatedRows
        });
        return result;
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤', error);
      throw error;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤
   * @param {Array} shiftWorkers - –ú–∞—Å—Å–∏–≤ –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async syncShiftWorkers(shiftWorkers) {
    try {
      if (!this.isConnected || !this.spreadsheetId) {
        throw new Error('Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      }
      
      const rows = shiftWorkers.map(worker => [
        worker.id,
        worker.createdAt,
        worker.updatedAt,
        worker.name,
        worker.phone,
        worker.object,
        worker.position || '',
        worker.status,
        worker.currentCheckpoint || '',
        worker.checkpointDate || '',
        worker.checkpointStatus || '',
        worker.checkpointResponse || '',
        worker.soComment || '',
        worker.shiftSchedule || ''
      ]);
      
      const result = await this.extensionAPI.updateGoogleSheet({
        spreadsheetId: this.spreadsheetId,
        range: '–í–∞—Ö—Ç–æ–≤–∏–∫–∏!A2:N',
        values: rows,
        clearFirst: true
      });
      
      if (result.success) {
        this.logger.info(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${result.updatedRows} –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤`);
        EventBus.emit('googleSheets:syncCompleted', {
          type: 'shiftWorkers',
          count: result.updatedRows
        });
        return result;
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤', error);
      throw error;
    }
  }

  /**
   * –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
   * @param {Array} knowledge - –ú–∞—Å—Å–∏–≤ –∑–∞–ø–∏—Å–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async syncKnowledge(knowledge) {
    try {
      if (!this.isConnected || !this.spreadsheetId) {
        throw new Error('Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      }
      
      const rows = knowledge.map(item => [
        item.id,
        item.createdAt,
        item.updatedAt,
        item.title,
        item.category,
        item.content,
        (item.tags || []).join(', '),
        item.source || '',
        item.version || 1,
        item.views || 0,
        item.helpful || 0,
        item.notHelpful || 0
      ]);
      
      const result = await this.extensionAPI.updateGoogleSheet({
        spreadsheetId: this.spreadsheetId,
        range: '–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π!A2:L',
        values: rows,
        clearFirst: true
      });
      
      if (result.success) {
        this.logger.info(`–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ ${result.updatedRows} –∑–∞–ø–∏—Å–µ–π –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π`);
        return result;
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏');
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –∑–Ω–∞–Ω–∏–π', error);
      throw error;
    }
  }

  /**
   * –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞ –æ–±—É—á–µ–Ω–∏—è
   * @param {Object} dialogData - –î–∞–Ω–Ω—ã–µ –¥–∏–∞–ª–æ–≥–∞
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
   */
  async saveTrainingDialog(dialogData) {
    try {
      if (!this.isConnected || !this.spreadsheetId) {
        throw new Error('Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      }
      
      const row = [
        dialogData.id || Date.now().toString(),
        dialogData.timestamp,
        dialogData.type || 'message',
        dialogData.author || 'user',
        dialogData.userMessage || dialogData.message,
        dialogData.category || 'general'
      ];
      
      const result = await this.extensionAPI.appendToGoogleSheet({
        spreadsheetId: this.spreadsheetId,
        range: '–ò—Å—Ç–æ—Ä–∏—è –æ–±—É—á–µ–Ω–∏—è!A:F',
        values: [row]
      });
      
      if (result.success) {
        this.logger.info('–î–∏–∞–ª–æ–≥ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ Google Sheets');
        return result;
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è');
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞', error);
      throw error;
    }
  }

  /**
   * –ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö
   * @param {Object} allData - –í—Å–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
   */
  async syncAllData(allData) {
    if (this.syncInProgress) {
      throw new Error('–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —É–∂–µ –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è');
    }
    
    this.syncInProgress = true;
    const results = {
      candidates: null,
      shiftWorkers: null,
      knowledge: null,
      errors: []
    };
    
    try {
      // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
      if (!this.spreadsheetId) {
        await this.createSpreadsheet();
      }
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      if (allData.candidates && allData.candidates.length > 0) {
        try {
          results.candidates = await this.syncCandidates(allData.candidates);
        } catch (error) {
          results.errors.push({ type: 'candidates', error: error.message });
        }
      }
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –≤–∞—Ö—Ç–æ–≤–∏–∫–æ–≤
      if (allData.shiftWorkers && allData.shiftWorkers.length > 0) {
        try {
          results.shiftWorkers = await this.syncShiftWorkers(allData.shiftWorkers);
        } catch (error) {
          results.errors.push({ type: 'shiftWorkers', error: error.message });
        }
      }
      
      // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –∑–Ω–∞–Ω–∏–π
      if (allData.knowledge && allData.knowledge.length > 0) {
        try {
          results.knowledge = await this.syncKnowledge(allData.knowledge);
        } catch (error) {
          results.errors.push({ type: 'knowledge', error: error.message });
        }
      }
      
      EventBus.emit('googleSheets:fullSyncCompleted', results);
      this.logger.info('–ü–æ–ª–Ω–∞—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞', results);
      
      return results;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª–Ω–æ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏', error);
      throw error;
    } finally {
      this.syncInProgress = false;
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
   * @param {string} range - –î–∏–∞–ø–∞–∑–æ–Ω —è—á–µ–µ–∫
   * @returns {Promise<Array>} –î–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
   */
  async getSheetData(range) {
    try {
      if (!this.isConnected || !this.spreadsheetId) {
        throw new Error('Google Sheets –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω');
      }
      
      const result = await this.extensionAPI.getGoogleSheetData({
        spreadsheetId: this.spreadsheetId,
        range
      });
      
      if (result.success) {
        return result.values || [];
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö');
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–∞–±–ª–∏—Ü—ã', error);
      throw error;
    }
  }

  /**
   * –û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–∞–±–ª–∏—Ü—ã –≤ –±—Ä–∞—É–∑–µ—Ä–µ
   */
  openSpreadsheet() {
    if (this.spreadsheetId) {
      const url = `https://docs.google.com/spreadsheets/d/${this.spreadsheetId}/edit`;
      window.open(url, '_blank');
    } else {
      this.logger.warn('ID —Ç–∞–±–ª–∏—Ü—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
    }
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç Google Sheets
   */
  async disconnect() {
    this.isConnected = false;
    this.spreadsheetId = null;
    
    const settings = JSON.parse(localStorage.getItem('hr-assistant-settings') || '{}');
    delete settings.spreadsheetId;
    settings.googleSheetsConnected = false;
    localStorage.setItem('hr-assistant-settings', JSON.stringify(settings));
    
    this.logger.info('–û—Ç–∫–ª—é—á–µ–Ω–æ –æ—Ç Google Sheets');
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export default new GoogleSheetsService();
