// src/services/OCRService.js
/**
 * üîç –°–µ—Ä–≤–∏—Å OCR (Optical Character Recognition)
 * @description –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
 */
import ExtensionAPIService from './ExtensionAPIService.js';
import Logger from '../utils/Logger.js';
import Tesseract from 'tesseract.js';

class OCRService {
  constructor() {
    this.logger = new Logger('OCRService');
    this.extensionAPI = ExtensionAPIService;
    this.apiKey = null;
    this.worker = null;
    this.isInitialized = false;
    
    this.initialize();
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
   */
  async initialize() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º API –∫–ª—é—á –∏–∑ –Ω–∞—Å—Ç—Ä–æ–µ–∫
      const settings = JSON.parse(localStorage.getItem('hr-assistant-settings') || '{}');
      this.apiKey = settings.ocrApiKey || null;
      
      // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Tesseract.js worker
      if (!this.apiKey) {
        await this.initializeTesseract();
      }
      
      this.isInitialized = true;
      this.logger.info('OCR —Å–µ—Ä–≤–∏—Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OCR', error);
    }
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Tesseract.js
   */
  async initializeTesseract() {
    try {
      this.worker = await Tesseract.createWorker({
        logger: (m) => {
          if (m.status === 'recognizing text') {
            const progress = Math.round(m.progress * 100);
            this.logger.debug(`–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: ${progress}%`);
          }
        }
      });
      
      await this.worker.loadLanguage('rus+eng');
      await this.worker.initialize('rus+eng');
      
      this.logger.info('Tesseract.js –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Tesseract', error);
      throw error;
    }
  }

  /**
   * –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
   * @param {string|Blob|File} image - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
   * @param {Object} options - –û–ø—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è
   */
  async recognizeText(image, options = {}) {
    try {
      // –ï—Å–ª–∏ –µ—Å—Ç—å API –∫–ª—é—á, –∏—Å–ø–æ–ª—å–∑—É–µ–º OCR.space —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      if (this.apiKey && this.extensionAPI.isConnected()) {
        return await this.recognizeWithOCRSpace(image, options);
      }
      
      // –ò–Ω–∞—á–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º Tesseract.js
      return await this.recognizeWithTesseract(image, options);
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞', error);
      throw error;
    }
  }

  /**
   * –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OCR.space API
   * @param {string|Blob|File} image - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   * @param {Object} options - –û–ø—Ü–∏–∏
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç
   */
  async recognizeWithOCRSpace(image, options) {
    try {
      this.logger.info('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ OCR.space API');
      
      // –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤ base64
      const base64 = await this.imageToBase64(image);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      const result = await this.extensionAPI.processImageOCR({
        image: base64,
        apiKey: this.apiKey,
        language: options.language || 'rus',
        detectOrientation: true,
        scale: true,
        isTable: options.isTable || false
      });
      
      if (result.success) {
        return {
          text: result.text,
          confidence: result.confidence || 0,
          data: result.parsedData || {},
          source: 'ocr.space'
        };
      } else {
        throw new Error(result.error || '–û—à–∏–±–∫–∞ OCR.space');
      }
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ OCR.space', error);
      // Fallback –Ω–∞ Tesseract
      return await this.recognizeWithTesseract(image, options);
    }
  }

  /**
   * –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Tesseract.js
   * @param {string|Blob|File} image - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   * @param {Object} options - –û–ø—Ü–∏–∏
   * @returns {Promise<Object>} –†–µ–∑—É–ª—å—Ç–∞—Ç
   */
  async recognizeWithTesseract(image, options) {
    try {
      this.logger.info('–†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ Tesseract.js');
      
      if (!this.worker) {
        await this.initializeTesseract();
      }
      
      // –†–∞—Å–ø–æ–∑–Ω–∞–µ–º —Ç–µ–∫—Å—Ç
      const { data } = await this.worker.recognize(image);
      
      return {
        text: data.text,
        confidence: data.confidence,
        data: this.parseDocumentData(data.text),
        source: 'tesseract'
      };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ Tesseract', error);
      throw error;
    }
  }

  /**
   * –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ base64
   * @param {string|Blob|File} image - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   * @returns {Promise<string>} Base64 —Å—Ç—Ä–æ–∫–∞
   */
  async imageToBase64(image) {
    return new Promise((resolve, reject) => {
      if (typeof image === 'string') {
        // –ï—Å–ª–∏ —ç—Ç–æ —É–∂–µ base64 –∏–ª–∏ URL
        if (image.startsWith('data:')) {
          resolve(image);
          return;
        }
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        const img = new Image();
        img.crossOrigin = 'anonymous';
        img.onload = () => {
          const canvas = document.createElement('canvas');
          canvas.width = img.width;
          canvas.height = img.height;
          const ctx = canvas.getContext('2d');
          ctx.drawImage(img, 0, 0);
          resolve(canvas.toDataURL('image/jpeg'));
        };
        img.onerror = reject;
        img.src = image;
      } else if (image instanceof Blob || image instanceof File) {
        // –ß–∏—Ç–∞–µ–º —Ñ–∞–π–ª
        const reader = new FileReader();
        reader.onloadend = () => resolve(reader.result);
        reader.onerror = reject;
        reader.readAsDataURL(image);
      } else {
        reject(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è'));
      }
    });
  }

  /**
   * –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ —Ç–µ–∫—Å—Ç–∞
   * @param {string} text - –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
   * @returns {Object} –ò–∑–≤–ª–µ—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
   */
  parseDocumentData(text) {
    const data = {};
    
    // –û—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç
    const cleanText = text.replace(/\s+/g, ' ').trim();
    
    // –ò–ù–ù
    const innMatch = cleanText.match(/–ò–ù–ù[:\s]*(\d{10,12})/i);
    if (innMatch) {
      data.inn = innMatch[1];
    }
    
    // –°–ù–ò–õ–°
    const snilsMatch = cleanText.match(/–°–ù–ò–õ–°[:\s]*([\d\s-]+)/i);
    if (snilsMatch) {
      data.snils = snilsMatch[1].replace(/\s+/g, '');
    }
    
    // –ü–∞—Å–ø–æ—Ä—Ç
    const passportMatch = cleanText.match(/(?:—Å–µ—Ä–∏—è\s*–∏\s*–Ω–æ–º–µ—Ä|–ø–∞—Å–ø–æ—Ä—Ç)[:\s]*(\d{4})\s*(\d{6})/i);
    if (passportMatch) {
      data.passport = `${passportMatch[1]} ${passportMatch[2]}`;
    }
    
    // –§–ò–û
    const fioMatch = cleanText.match(/(?:—Ñ–∏–æ|—Ñ–∞–º–∏–ª–∏—è\s*–∏–º—è\s*–æ—Ç—á–µ—Å—Ç–≤–æ)[:\s]*([–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+\s+[–ê-–Ø–Å][–∞-—è—ë]+)/i);
    if (fioMatch) {
      data.name = fioMatch[1];
    }
    
    // –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è
    const birthDateMatch = cleanText.match(/(?:–¥–∞—Ç–∞\s*—Ä–æ–∂–¥–µ–Ω–∏—è|—Ä–æ–¥–∏–ª—Å—è)[:\s]*(\d{1,2})[.\s](\d{1,2})[.\s](\d{4})/i);
    if (birthDateMatch) {
      data.birthDate = `${birthDateMatch[3]}-${birthDateMatch[2].padStart(2, '0')}-${birthDateMatch[1].padStart(2, '0')}`;
    }
    
    // –ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è
    const birthPlaceMatch = cleanText.match(/(?:–º–µ—Å—Ç–æ\s*—Ä–æ–∂–¥–µ–Ω–∏—è)[:\s]*([^,\n]+)/i);
    if (birthPlaceMatch) {
      data.birthPlace = birthPlaceMatch[1].trim();
    }
    
    // –ö–µ–º –≤—ã–¥–∞–Ω
    const issuedByMatch = cleanText.match(/(?:–≤—ã–¥–∞–Ω|–∫–µ–º\s*–≤—ã–¥–∞–Ω)[:\s]*([^,\n]+(?:–ú–í–î|–û–í–î|–£–§–ú–°)[^,\n]*)/i);
    if (issuedByMatch) {
      data.passportIssuedBy = issuedByMatch[1].trim();
    }
    
    // –î–∞—Ç–∞ –≤—ã–¥–∞—á–∏
    const issueDateMatch = cleanText.match(/(?:–¥–∞—Ç–∞\s*–≤—ã–¥–∞—á–∏|–≤—ã–¥–∞–Ω)[:\s]*(\d{1,2})[.\s](\d{1,2})[.\s](\d{4})/i);
    if (issueDateMatch) {
      data.passportIssueDate = `${issueDateMatch[3]}-${issueDateMatch[2].padStart(2, '0')}-${issueDateMatch[1].padStart(2, '0')}`;
    }
    
    // –ê–¥—Ä–µ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
    const addressMatch = cleanText.match(/(?:–∞–¥—Ä–µ—Å\s*—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏|–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω|–ø—Ä–æ–ø–∏—Å–∞–Ω)[:\s]*([^,\n]+)/i);
    if (addressMatch) {
      data.registrationAddress = addressMatch[1].trim();
    }
    
    return data;
  }

  /**
   * –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞
   * @param {string|Blob|File} image - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–∞—Å–ø–æ—Ä—Ç–∞
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –ø–∞—Å–ø–æ—Ä—Ç–∞
   */
  async recognizePassport(image) {
    try {
      const result = await this.recognizeText(image, { isTable: true });
      
      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞
      const passportData = {
        ...result.data,
        documentType: 'passport',
        confidence: result.confidence
      };
      
      // –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö
      this.validatePassportData(passportData);
      
      return passportData;
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ø–∞—Å–ø–æ—Ä—Ç–∞', error);
      throw error;
    }
  }

  /**
   * –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –ò–ù–ù
   * @param {string|Blob|File} image - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ò–ù–ù
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –ò–ù–ù
   */
  async recognizeINN(image) {
    try {
      const result = await this.recognizeText(image);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –ò–ù–ù
      const innMatch = result.text.match(/\d{10,12}/);
      if (!innMatch) {
        throw new Error('–ò–ù–ù –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏');
      }
      
      return {
        inn: innMatch[0],
        documentType: 'inn',
        confidence: result.confidence
      };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ò–ù–ù', error);
      throw error;
    }
  }

  /**
   * –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –°–ù–ò–õ–°
   * @param {string|Blob|File} image - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –°–ù–ò–õ–°
   * @returns {Promise<Object>} –î–∞–Ω–Ω—ã–µ –°–ù–ò–õ–°
   */
  async recognizeSNILS(image) {
    try {
      const result = await this.recognizeText(image);
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –°–ù–ò–õ–°
      const snilsMatch = result.text.match(/(\d{3}[-\s]?\d{3}[-\s]?\d{3}[-\s]?\d{2})/);
      if (!snilsMatch) {
        throw new Error('–°–ù–ò–õ–° –Ω–µ –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏');
      }
      
      return {
        snils: snilsMatch[1].replace(/[-\s]/g, ''),
        documentType: 'snils',
        confidence: result.confidence
      };
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –°–ù–ò–õ–°', error);
      throw error;
    }
  }

  /**
   * –í–∞–ª–∏–¥–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–∞—Å–ø–æ—Ä—Ç–∞
   * @param {Object} data - –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   * @throws {Error} –û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
   */
  validatePassportData(data) {
    const errors = [];
    
    if (!data.passport || !/^\d{4}\s?\d{6}$/.test(data.passport.replace(/\s/g, ''))) {
      errors.push('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–µ—Ä–∏–∏ –∏ –Ω–æ–º–µ—Ä–∞ –ø–∞—Å–ø–æ—Ä—Ç–∞');
    }
    
    if (!data.name || data.name.split(' ').length < 2) {
      errors.push('–§–ò–û –¥–æ–ª–∂–Ω–æ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –º–∏–Ω–∏–º—É–º —Ñ–∞–º–∏–ª–∏—é –∏ –∏–º—è');
    }
    
    if (!data.birthDate) {
      errors.push('–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }
    
    if (errors.length > 0) {
      throw new Error(`–û—à–∏–±–∫–∏ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: ${errors.join(', ')}`);
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
   * @param {string|Blob|File} image - –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
   * @returns {Promise<Object>} –û—Ü–µ–Ω–∫–∞ –∫–∞—á–µ—Å—Ç–≤–∞
   */
  async checkImageQuality(image) {
    try {
      // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞
      const img = new Image();
      const src = typeof image === 'string' ? image : URL.createObjectURL(image);
      
      return new Promise((resolve) => {
        img.onload = () => {
          const quality = {
            width: img.width,
            height: img.height,
            resolution: img.width * img.height,
            isGoodQuality: img.width >= 800 && img.height >= 600,
            recommendations: []
          };
          
          if (img.width < 800 || img.height < 600) {
            quality.recommendations.push('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–µ. –ú–∏–Ω–∏–º—É–º 800x600');
          }
          
          if (img.width > 4000 || img.height > 4000) {
            quality.recommendations.push('–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–º–µ–Ω—å—à–∏—Ç—å');
          }
          
          // –û—á–∏—â–∞–µ–º URL –µ—Å–ª–∏ —Å–æ–∑–¥–∞–≤–∞–ª–∏
          if (typeof image !== 'string') {
            URL.revokeObjectURL(src);
          }
          
          resolve(quality);
        };
        
        img.src = src;
      });
    } catch (error) {
      this.logger.error('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞', error);
      throw error;
    }
  }

  /**
   * –£–Ω–∏—á—Ç–æ–∂–µ–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞
   */
  async destroy() {
    if (this.worker) {
      await this.worker.terminate();
      this.worker = null;
    }
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–∏–Ω–≥–ª—Ç–æ–Ω
export default new OCRService();
