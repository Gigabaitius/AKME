/**
 * WhatsApp Web Content Script
 * –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å WhatsApp Web –¥–ª—è HR Assistant
 */

(function() {
  'use strict';

  console.log('üü¢ WhatsApp Content Script loaded');

  // ==================== –°–û–°–¢–û–Ø–ù–ò–ï ====================
  const state = {
    isReady: false,
    observer: null,
    messageQueue: [],
    processedMessages: new Set(),
    lastActivity: null,
    silentCandidates: new Map(), // –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –º–æ–ª—á–∞—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
    checkInterval: null
  };

  // ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
  function init() {
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ WhatsApp Web
    waitForWhatsApp().then(() => {
      console.log('‚úÖ WhatsApp Web ready');
      state.isReady = true;
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º background script
      chrome.runtime.sendMessage({
        type: 'WHATSAPP_READY'
      });
      
      // –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
      startMonitoring();
      
      // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –º–æ–ª—á–∞—â–∏—Ö –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤
      startSilentTracking();
    });
  }

  // ==================== –û–ñ–ò–î–ê–ù–ò–ï –ó–ê–ì–†–£–ó–ö–ò WHATSAPP ====================
  function waitForWhatsApp() {
    return new Promise((resolve) => {
      const checkInterval = setInterval(() => {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Å–Ω–æ–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ WhatsApp
        const app = document.querySelector('#app');
        const sidePanel = document.querySelector('[data-testid="chat-list"]');
        const mainPanel = document.querySelector('main');
        
        if (app && (sidePanel || mainPanel)) {
          clearInterval(checkInterval);
          resolve();
        }
      }, 1000);
      
      // –¢–∞–π–º–∞—É—Ç 30 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        clearInterval(checkInterval);
        resolve();
      }, 30000);
    });
  }

  // ==================== –ú–û–ù–ò–¢–û–†–ò–ù–ì –°–û–û–ë–©–ï–ù–ò–ô ====================
  function startMonitoring() {
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –Ω–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    observeMessages();
    
    // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ –≤ —á–∞—Ç–∞—Ö
    observeChats();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    setInterval(checkStatus, 10000);
  }

  function observeMessages() {
    // –ù–∞—Ö–æ–¥–∏–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    const messageContainer = document.querySelector('[data-testid="conversation-panel-messages"]');
    
    if (!messageContainer) {
      // –ü–æ–≤—Ç–æ—Ä—è–µ–º –ø–æ–ø—ã—Ç–∫—É —á–µ—Ä–µ–∑ —Å–µ–∫—É–Ω–¥—É
      setTimeout(observeMessages, 1000);
      return;
    }
    
    // –°–æ–∑–¥–∞–µ–º MutationObserver –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    state.observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        mutation.addedNodes.forEach((node) => {
          if (node.nodeType === 1) { // Element node
            processNewMessage(node);
          }
        });
      });
    });
    
    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–∞–±–ª—é–¥–µ–Ω–∏–µ
    state.observer.observe(messageContainer, {
      childList: true,
      subtree: true
    });
  }

  function processNewMessage(element) {
    // –ò—â–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è
    const messageElements = element.querySelectorAll('[data-testid="msg-container"]');
    
    messageElements.forEach((msgElement) => {
      const messageId = msgElement.getAttribute('data-id');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ –ª–∏ —É–∂–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (messageId && !state.processedMessages.has(messageId)) {
        state.processedMessages.add(messageId);
        
        // –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const messageData = extractMessageData(msgElement);
        
        if (messageData) {
          // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ background script
          chrome.runtime.sendMessage({
            type: 'NEW_MESSAGE',
            data: messageData
          });
          
          // –û–±–Ω–æ–≤–ª—è–µ–º tracking –º–æ–ª—á–∞—â–∏—Ö
          updateSilentTracking(messageData.phone);
        }
      }
    });
  }

  function extractMessageData(msgElement) {
    try {
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è (–≤—Ö–æ–¥—è—â–µ–µ/–∏—Å—Ö–æ–¥—è—â–µ–µ)
      const isIncoming = msgElement.querySelector('[data-testid="msg-dblcheck"]') === null;
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
      const textElement = msgElement.querySelector('[data-testid="msg-text"]');
      const text = textElement ? textElement.innerText : '';
      
      // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Ä–µ–º—è
      const timeElement = msgElement.querySelector('[data-testid="msg-meta"] span');
      const time = timeElement ? timeElement.innerText : new Date().toISOString();
      
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
      const chatInfo = getCurrentChatInfo();
      
      return {
        id: msgElement.getAttribute('data-id'),
        phone: chatInfo.phone,
        name: chatInfo.name,
        text: text,
        time: time,
        isIncoming: isIncoming,
        hasMedia: msgElement.querySelector('[data-testid="media-content"]') !== null,
        hasDocument: msgElement.querySelector('[data-testid="document-content"]') !== null,
        timestamp: new Date().toISOString()
      };
    } catch (error) {
      console.error('Error extracting message data:', error);
      return null;
    }
  }

  function getCurrentChatInfo() {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —á–∞—Ç–∞
      const headerElement = document.querySelector('header [data-testid="conversation-header"]');
      const titleElement = headerElement?.querySelector('span[title]');
      const name = titleElement?.title || 'Unknown';
      
      // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const phoneMatch = name.match(/\+?\d{10,}/);
      const phone = phoneMatch ? phoneMatch[0] : name;
      
      return { name, phone };
    } catch (error) {
      console.error('Error getting chat info:', error);
      return { name: 'Unknown', phone: 'Unknown' };
    }
  }

  // ==================== –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô ====================
  async function sendMessage(phone, message, attachments = []) {
    try {
      // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
      const normalizedPhone = normalizePhone(phone);
      
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º —á–∞—Ç
      await openChat(normalizedPhone);
      
      // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–∞
      await waitForChatLoad();
      
      // –ï—Å–ª–∏ –µ—Å—Ç—å –≤–ª–æ–∂–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
      if (attachments.length > 0) {
        await sendAttachments(attachments);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
      if (message) {
        await typeAndSendMessage(message);
      }
      
      return { success: true };
    } catch (error) {
      console.error('Error sending message:', error);
      return { success: false, error: error.message };
    }
  }

  function normalizePhone(phone) {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ—Ü–∏—Ñ—Ä–æ–≤—ã–µ —Å–∏–º–≤–æ–ª—ã
    let normalized = phone.replace(/\D/g, '');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–¥ —Å—Ç—Ä–∞–Ω—ã –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
    if (!normalized.startsWith('7') && normalized.length === 10) {
      normalized = '7' + normalized;
    }
    
    return normalized;
  }

  async function openChat(phone) {
    // –ò—Å–ø–æ–ª—å–∑—É–µ–º WhatsApp Web URL —Å—Ö–µ–º—É
    const url = `https://web.whatsapp.com/send?phone=${phone}`;
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–∫—Ä—ã—Ç –ª–∏ —É–∂–µ –Ω—É–∂–Ω—ã–π —á–∞—Ç
    const currentChat = getCurrentChatInfo();
    if (currentChat.phone.includes(phone)) {
      return;
    }
    
    // –û—Ç–∫—Ä—ã–≤–∞–µ–º –Ω–æ–≤—ã–π —á–∞—Ç
    window.location.href = url;
    
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏
    await new Promise(resolve => setTimeout(resolve, 3000));
  }

  async function waitForChatLoad() {
    return new Promise((resolve) => {
      const checkInterval = setInterval(() => {
        const inputField = document.querySelector('[data-testid="conversation-compose-box-input"]');
        if (inputField) {
          clearInterval(checkInterval);
          resolve();
        }
      }, 500);
      
      // –¢–∞–π–º–∞—É—Ç 10 —Å–µ–∫—É–Ω–¥
      setTimeout(() => {
        clearInterval(checkInterval);
        resolve();
      }, 10000);
    });
  }

  async function typeAndSendMessage(message) {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
    const inputField = document.querySelector('[data-testid="conversation-compose-box-input"]');
    
    if (!inputField) {
      throw new Error('Input field not found');
    }
    
    // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –Ω–∞ –ø–æ–ª–µ
    inputField.focus();
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç (—ç–º—É–ª–∏—Ä—É–µ–º –≤–≤–æ–¥)
    const inputEvent = new InputEvent('input', {
      bubbles: true,
      cancelable: true,
    });
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç
    inputField.innerHTML = message.replace(/\n/g, '<br>');
    inputField.dispatchEvent(inputEvent);
    
    // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
    await new Promise(resolve => setTimeout(resolve, 100));
    
    // –ù–∞—Ö–æ–¥–∏–º –∏ –Ω–∞–∂–∏–º–∞–µ–º –∫–Ω–æ–ø–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏
    const sendButton = document.querySelector('[data-testid="compose-btn-send"]');
    if (sendButton) {
      sendButton.click();
    } else {
      // –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥ - –Ω–∞–∂–∞—Ç–∏–µ Enter
      const enterEvent = new KeyboardEvent('keydown', {
        key: 'Enter',
        code: 'Enter',
        keyCode: 13,
        which: 13,
        bubbles: true
      });
      inputField.dispatchEvent(enterEvent);
    }
  }

  async function sendAttachments(attachments) {
    // –ù–∞—Ö–æ–¥–∏–º –∫–Ω–æ–ø–∫—É –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
    const attachButton = document.querySelector('[data-testid="clip"]');
    
    if (!attachButton) {
      console.warn('Attach button not found');
      return;
    }
    
    attachButton.click();
    
    // –ñ–¥–µ–º –æ—Ç–∫—Ä—ã—Ç–∏—è –º–µ–Ω—é
    await new Promise(resolve => setTimeout(resolve, 500));
    
    // –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
    // –≠—Ç–æ —Å–ª–æ–∂–Ω–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ content script –∏–∑-–∑–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
    console.log('Attachment upload not fully implemented');
  }

  // ==================== –ü–û–õ–£–ß–ï–ù–ò–ï –°–ü–ò–°–ö–ê –ß–ê–¢–û–í ====================
  function getChats() {
    try {
      const chatElements = document.querySelectorAll('[data-testid="cell-frame-container"]');
      const chats = [];
      
      chatElements.forEach((chatElement) => {
        const titleElement = chatElement.querySelector('[data-testid="cell-frame-title"] span[title]');
        const lastMessageElement = chatElement.querySelector('[data-testid="last-msg-status"]');
        const timeElement = chatElement.querySelector('[data-testid="cell-frame-secondary"] > span');
        const unreadElement = chatElement.querySelector('[data-testid="icon-unread-count"]');
        
        if (titleElement) {
          chats.push({
            name: titleElement.title,
            lastMessage: lastMessageElement?.innerText || '',
            time: timeElement?.innerText || '',
            unreadCount: unreadElement ? parseInt(unreadElement.innerText) || 0 : 0,
            phone: extractPhoneFromName(titleElement.title)
          });
        }
      });
      
      return chats;
    } catch (error) {
      console.error('Error getting chats:', error);
      return [];
    }
  }

  function extractPhoneFromName(name) {
    const phoneMatch = name.match(/\+?\d{10,}/);
    return phoneMatch ? phoneMatch[0] : name;
  }

  // ==================== –û–¢–°–õ–ï–ñ–ò–í–ê–ù–ò–ï –ú–û–õ–ß–ê–©–ò–• –ö–ê–ù–î–ò–î–ê–¢–û–í ====================
  function startSilentTracking() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–æ–ª—á–∞—â–∏—Ö –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
    state.checkInterval = setInterval(checkSilentCandidates, 30 * 60 * 1000);
    
    // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç—É
    setTimeout(checkSilentCandidates, 60000);
  }

  function updateSilentTracking(phone) {
    state.silentCandidates.set(phone, {
      lastActivity: new Date().toISOString(),
      messageCount: (state.silentCandidates.get(phone)?.messageCount || 0) + 1
    });
  }

  function checkSilentCandidates() {
    const now = new Date();
    const silentThreshold = 8 * 60 * 60 * 1000; // 8 —á–∞—Å–æ–≤
    const transferThreshold = 18.5; // 18:30
    
    const silentList = [];
    const transferList = [];
    
    state.silentCandidates.forEach((data, phone) => {
      const lastActivity = new Date(data.lastActivity);
      const timeSinceActivity = now - lastActivity;
      
      if (timeSinceActivity > silentThreshold) {
        silentList.push({
          phone,
          lastActivity: data.lastActivity,
          hoursAgo: Math.floor(timeSinceActivity / (60 * 60 * 1000))
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –ø–µ—Ä–µ–¥–∞—Ç—å –Ω–∞ 1-—é –ª–∏–Ω–∏—é
        const currentHour = now.getHours() + now.getMinutes() / 60;
        if (currentHour >= transferThreshold) {
          transferList.push({
            phone,
            reason: '–ü–æ—Å–ª–µ 18:30, –º–æ–ª—á–∏—Ç –±–æ–ª–µ–µ 8 —á–∞—Å–æ–≤'
          });
        }
      }
    });
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ background script
    if (silentList.length > 0) {
      chrome.runtime.sendMessage({
        type: 'SILENT_CANDIDATES',
        data: { silentList, transferList }
      });
    }
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –ß–ê–¢–û–í ====================
  function observeChats() {
    const chatList = document.querySelector('[data-testid="chat-list"]');
    
    if (!chatList) {
      setTimeout(observeChats, 1000);
      return;
    }
    
    const chatObserver = new MutationObserver(() => {
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö
      const chats = getChats();
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤ background
      chrome.runtime.sendMessage({
        type: 'CHATS_UPDATE',
        data: chats
      });
    });
    
    chatObserver.observe(chatList, {
      childList: true,
      subtree: true
    });
  }

  // ==================== –ü–†–û–í–ï–†–ö–ê –°–¢–ê–¢–£–°–ê ====================
  function checkStatus() {
    const isLoggedIn = document.querySelector('[data-testid="default-user"]') !== null;
    const isConnected = document.querySelector('[data-testid="chat-list"]') !== null;
    
    chrome.runtime.sendMessage({
      type: 'STATUS_UPDATE',
      data: {
        isLoggedIn,
        isConnected,
        lastCheck: new Date().toISOString()
      }
    });
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –û–¢ BACKGROUND ====================
  chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
    console.log('Message from background:', request.type);
    
    switch (request.type) {
      case 'PING':
        sendResponse({ 
          connected: state.isReady,
          chatsCount: getChats().length
        });
        break;
        
      case 'SEND_MESSAGE':
        sendMessage(request.data.phone, request.data.message, request.data.attachments)
          .then(sendResponse);
        return true; // –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        
      case 'GET_CHATS':
        sendResponse({ 
          success: true, 
          chats: getChats() 
        });
        break;
        
      case 'GET_CHAT_HISTORY':
        getChatHistory(request.data.phone)
          .then(sendResponse);
        return true;
        
      case 'SEARCH_MESSAGES':
        searchMessages(request.data.query)
          .then(sendResponse);
        return true;
        
      case 'MARK_AS_READ':
        markChatAsRead(request.data.phone)
          .then(sendResponse);
        return true;
        
      default:
        sendResponse({ error: 'Unknown command' });
    }
  });

  // ==================== –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ====================
  async function getChatHistory(phone) {
    try {
      await openChat(phone);
      await waitForChatLoad();
      
      const messages = [];
      const messageElements = document.querySelectorAll('[data-testid="msg-container"]');
      
      messageElements.forEach((element) => {
        const messageData = extractMessageData(element);
        if (messageData) {
          messages.push(messageData);
        }
      });
      
      return { success: true, messages };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  async function searchMessages(query) {
    try {
      // –û—Ç–∫—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
      const searchButton = document.querySelector('[data-testid="icon-search"]');
      if (searchButton) {
        searchButton.click();
        await new Promise(resolve => setTimeout(resolve, 500));
        
        // –í–≤–æ–¥–∏–º –∑–∞–ø—Ä–æ—Å
        const searchInput = document.querySelector('[data-testid="search-input"]');
        if (searchInput) {
          searchInput.value = query;
          searchInput.dispatchEvent(new Event('input', { bubbles: true }));
          
          await new Promise(resolve => setTimeout(resolve, 1000));
          
          // –°–æ–±–∏—Ä–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
          const results = [];
          // ... –ª–æ–≥–∏–∫–∞ —Å–±–æ—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
          
          return { success: true, results };
        }
      }
      
      return { success: false, error: 'Search not available' };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  async function markChatAsRead(phone) {
    try {
      await openChat(phone);
      // WhatsApp –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–º–µ—á–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —á–∞—Ç–∞
      return { success: true };
    } catch (error) {
      return { success: false, error: error.message };
    }
  }

  // ==================== –ê–í–¢–û–ú–ê–¢–ò–ó–ê–¶–ò–Ø –†–£–¢–ò–ù–ù–´–• –ó–ê–î–ê–ß ====================
  function setupAutomation() {
    // –ê–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–∏–ø–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    const autoResponses = {
      '–≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã': '–ù–∞—à –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç —Å 9:00 –¥–æ 18:00. –°—É–±–±–æ—Ç–∞ –∏ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - –≤—ã—Ö–æ–¥–Ω—ã–µ –¥–Ω–∏.',
      '–≤–∞–∫–∞–Ω—Å–∏—è': '–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∞—à–µ —Ä–µ–∑—é–º–µ –¥–ª—è —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏—è.',
      '–∑–∞—Ä–ø–ª–∞—Ç–∞': '–í–æ–ø—Ä–æ—Å—ã –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã –æ–±—Å—É–∂–¥–∞—é—Ç—Å—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ –Ω–∞ —Å–æ–±–µ—Å–µ–¥–æ–≤–∞–Ω–∏–∏.',
      '–∫–æ–Ω—Ç–∞–∫—Ç—ã': '–í—ã –º–æ–∂–µ—Ç–µ —Å–≤—è–∑–∞—Ç—å—Å—è —Å –Ω–∞–º–∏ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É +7 (XXX) XXX-XX-XX –∏–ª–∏ –Ω–∞–ø–∏—Å–∞—Ç—å –Ω–∞ email hr@company.ru'
    };
    
    // –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤
  }

  // ==================== –≠–ö–°–ü–û–†–¢ –î–ê–ù–ù–´–• ====================
  function exportChatData() {
    const chats = getChats();
    const exportData = {
      timestamp: new Date().toISOString(),
      chatsCount: chats.length,
      chats: chats,
      silentCandidates: Array.from(state.silentCandidates.entries()).map(([phone, data]) => ({
        phone,
        ...data
      }))
    };
    
    return exportData;
  }

  // ==================== –û–ß–ò–°–¢–ö–ê –ü–†–ò –í–´–ì–†–£–ó–ö–ï ====================
  window.addEventListener('beforeunload', () => {
    if (state.observer) {
      state.observer.disconnect();
    }
    if (state.checkInterval) {
      clearInterval(state.checkInterval);
    }
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º background script
    chrome.runtime.sendMessage({
      type: 'WHATSAPP_DISCONNECTED'
    });
  });

  // ==================== –ó–ê–ü–£–°–ö ====================
  init();

})();
