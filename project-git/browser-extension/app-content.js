/**
 * App Content Script
 * –ú–æ—Å—Ç –º–µ–∂–¥—É HR Assistant –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –∏ –±—Ä–∞—É–∑–µ—Ä–Ω—ã–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ–º
 */

(function() {
  'use strict';

  console.log('üîå HR Assistant App Content Script loaded');

  // ==================== –°–û–°–¢–û–Ø–ù–ò–ï ====================
  const state = {
    isConnected: false,
    extensionId: chrome.runtime.id,
    pendingRequests: new Map(),
    requestTimeout: 30000, // 30 —Å–µ–∫—É–Ω–¥
    reconnectInterval: null,
    messageQueue: []
  };

  // ==================== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø ====================
  function init() {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    checkConnection();
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ—Å—Ç –¥–ª—è –∫–æ–º–º—É–Ω–∏–∫–∞—Ü–∏–∏
    setupBridge();
    
    // –°–ª—É—à–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
    listenToExtension();
    
    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    state.reconnectInterval = setInterval(checkConnection, 5000);
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    notifyAppReady();
  }

  // ==================== –ü–†–û–í–ï–†–ö–ê –°–û–ï–î–ò–ù–ï–ù–ò–Ø ====================
  function checkConnection() {
    chrome.runtime.sendMessage({ type: 'PING' }, (response) => {
      if (chrome.runtime.lastError) {
        console.error('Extension connection error:', chrome.runtime.lastError);
        state.isConnected = false;
        notifyConnectionStatus(false);
      } else if (response && response.connected) {
        if (!state.isConnected) {
          console.log('‚úÖ Connected to extension');
          state.isConnected = true;
          notifyConnectionStatus(true);
          processQueuedMessages();
        }
      }
    });
  }

  // ==================== –ú–û–°–¢ –î–õ–Ø –ö–û–ú–ú–£–ù–ò–ö–ê–¶–ò–ò ====================
  function setupBridge() {
    // –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π –æ–±—ä–µ–∫—Ç –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º
    window.HRAssistantExtension = {
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      isAvailable: () => state.isConnected,
      
      // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
      sendMessage: (message) => {
        return sendToExtension(message);
      },
      
      // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      on: (event, callback) => {
        window.addEventListener(`hr-extension-${event}`, (e) => {
          callback(e.detail);
        });
      },
      
      // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç —Å–æ–±—ã—Ç–∏–π
      off: (event, callback) => {
        window.removeEventListener(`hr-extension-${event}`, callback);
      },
      
      // API –º–µ—Ç–æ–¥—ã
      api: {
        // Google Sheets
        connectGoogleSheets: () => sendToExtension({ type: 'CONNECT_GOOGLE' }),
        
        sheetsOperation: (operation, spreadsheetId, range, values) => {
          return sendToExtension({
            type: 'SHEETS_OPERATION',
            data: { operation, spreadsheetId, range, values }
          });
        },
        
        // WhatsApp
        connectWhatsApp: () => sendToExtension({ type: 'CONNECT_WHATSAPP' }),
        
        sendWhatsAppMessage: (phone, message, attachments) => {
          return sendToExtension({
            type: 'SEND_WHATSAPP',
            data: { phone, message, attachments }
          });
        },
        
        getWhatsAppChats: () => sendToExtension({ type: 'GET_WHATSAPP_CHATS' }),
        
        // OCR
        processOCR: (image, language = 'rus') => {
          return sendToExtension({
            type: 'PROCESS_OCR',
            data: { image, language }
          });
        },
        
        // Telegram
        sendTelegramMessage: (chatId, message) => {
          return sendToExtension({
            type: 'SEND_TELEGRAM',
            data: { chatId, message }
          });
        },
        
        // SMS
        sendSMS: (to, body) => {
          return sendToExtension({
            type: 'SEND_SMS',
            data: { to, body }
          });
        },
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        updateSettings: (settings) => {
          return sendToExtension({
            type: 'UPDATE_SETTINGS',
            data: settings
          });
        },
        
        getStatus: () => sendToExtension({ type: 'GET_STATUS' }),
        
        clearCache: () => sendToExtension({ type: 'CLEAR_CACHE' })
      },
      
      // –£—Ç–∏–ª–∏—Ç—ã
      utils: {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ API
        checkAPI: async (apiName) => {
          const status = await sendToExtension({ type: 'GET_STATUS' });
          return status?.status?.apis?.[apiName]?.connected || false;
        },
        
        // –ü–æ–ª—É—á–µ–Ω–∏–µ –≤–µ—Ä—Å–∏–∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
        getVersion: async () => {
          const response = await sendToExtension({ type: 'PING' });
          return response?.version;
        },
        
        // –ü–∞–∫–µ—Ç–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
        batchSend: async (messages) => {
          const results = [];
          for (const msg of messages) {
            try {
              const result = await sendToExtension(msg);
              results.push({ success: true, data: result });
            } catch (error) {
              results.push({ success: false, error: error.message });
            }
          }
          return results;
        }
      }
    };
    
    // –î–µ–ª–∞–µ–º –æ–±—ä–µ–∫—Ç –Ω–µ–∏–∑–º–µ–Ω—è–µ–º—ã–º
    Object.freeze(window.HRAssistantExtension.api);
    Object.freeze(window.HRAssistantExtension.utils);
  }

  // ==================== –û–¢–ü–†–ê–í–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –í –†–ê–°–®–ò–†–ï–ù–ò–ï ====================
  function sendToExtension(message) {
    return new Promise((resolve, reject) => {
      if (!state.isConnected) {
        // –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ—á–µ—Ä–µ–¥—å –µ—Å–ª–∏ –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–æ
        state.messageQueue.push({ message, resolve, reject });
        checkConnection(); // –ü—Ä–æ–±—É–µ–º –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
        return;
      }
      
      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
      const requestId = generateRequestId();
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–º–∏—Å –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
      state.pendingRequests.set(requestId, { resolve, reject });
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç
      setTimeout(() => {
        if (state.pendingRequests.has(requestId)) {
          state.pendingRequests.get(requestId).reject(new Error('Request timeout'));
          state.pendingRequests.delete(requestId);
        }
      }, state.requestTimeout);
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      chrome.runtime.sendMessage(
        { ...message, requestId },
        (response) => {
          if (chrome.runtime.lastError) {
            const request = state.pendingRequests.get(requestId);
            if (request) {
              request.reject(chrome.runtime.lastError);
              state.pendingRequests.delete(requestId);
            }
          } else {
            const request = state.pendingRequests.get(requestId);
            if (request) {
              request.resolve(response);
              state.pendingRequests.delete(requestId);
            }
          }
        }
      );
    });
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ö–ê –°–û–û–ë–©–ï–ù–ò–ô –û–¢ –†–ê–°–®–ò–†–ï–ù–ò–Ø ====================
  function listenToExtension() {
    chrome.runtime.onMessage.addListener((message, sender, sendResponse) => {
      console.log('üì® Message from extension:', message);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –Ω–∞—à–µ–≥–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
      if (sender.id !== state.extensionId) {
        return;
      }
      
      // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã —Å–æ–æ–±—â–µ–Ω–∏–π
      switch (message.type) {
        case 'EXTENSION_EVENT':
          handleExtensionEvent(message.event, message.data);
          break;
          
        case 'STATUS_UPDATE':
          handleStatusUpdate(message.data);
          break;
          
        case 'ERROR':
          handleError(message.error);
          break;
          
        default:
          console.log('Unknown message type:', message.type);
      }
      
      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
      sendResponse({ received: true });
    });
  }

  // ==================== –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –°–û–ë–´–¢–ò–ô ====================
  function handleExtensionEvent(event, data) {
    // –°–æ–∑–¥–∞–µ–º –∫–∞—Å—Ç–æ–º–Ω–æ–µ —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    const customEvent = new CustomEvent(`hr-extension-${event}`, {
      detail: data,
      bubbles: true,
      cancelable: true
    });
    
    window.dispatchEvent(customEvent);
    
    // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —Å–æ–±—ã—Ç–∏–π
    switch (event) {
      case 'whatsapp_message':
        handleWhatsAppMessage(data);
        break;
        
      case 'whatsapp_disconnected':
        handleWhatsAppDisconnected();
        break;
        
      case 'google_token_expired':
        handleGoogleTokenExpired();
        break;
        
      case 'silent_candidates':
        handleSilentCandidates(data);
        break;
    }
  }

  function handleWhatsAppMessage(data) {
    console.log('üì± New WhatsApp message:', data);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
    if (Notification.permission === 'granted') {
      new Notification(`–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${data.name}`, {
        body: data.text,
        icon: '/logo192.png',
        tag: `whatsapp-${data.phone}`
      });
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI —á–µ—Ä–µ–∑ —Å–æ–±—ã—Ç–∏–µ
    dispatchAppEvent('new-whatsapp-message', data);
  }

  function handleWhatsAppDisconnected() {
    console.warn('‚ö†Ô∏è WhatsApp disconnected');
    dispatchAppEvent('whatsapp-disconnected', {});
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    showNotification('WhatsApp –æ—Ç–∫–ª—é—á–µ–Ω', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç–µ WhatsApp Web');
  }

  function handleGoogleTokenExpired() {
    console.warn('‚ö†Ô∏è Google token expired');
    dispatchAppEvent('google-token-expired', {});
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω
    window.HRAssistantExtension.api.connectGoogleSheets()
      .then(() => {
        console.log('‚úÖ Google token refreshed');
        dispatchAppEvent('google-reconnected', {});
      })
      .catch(error => {
        console.error('Failed to refresh Google token:', error);
      });
  }

  function handleSilentCandidates(data) {
    console.log('üîá Silent candidates detected:', data);
    dispatchAppEvent('silent-candidates-update', data);
    
    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–∞–Ω–¥–∏–¥–∞—Ç—ã –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏
    if (data.transferList && data.transferList.length > 0) {
      showNotification(
        '–¢—Ä–µ–±—É–µ—Ç—Å—è –ø–µ—Ä–µ–¥–∞—á–∞ –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤',
        `${data.transferList.length} –∫–∞–Ω–¥–∏–¥–∞—Ç–æ–≤ —Ç—Ä–µ–±—É—é—Ç –ø–µ—Ä–µ–¥–∞—á–∏ –Ω–∞ 1-—é –ª–∏–Ω–∏—é`
      );
    }
  }

  function handleStatusUpdate(status) {
    console.log('üìä Status update:', status);
    dispatchAppEvent('extension-status-update', status);
  }

  function handleError(error) {
    console.error('‚ùå Extension error:', error);
    dispatchAppEvent('extension-error', error);
    
    showNotification('–û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è', error.message || '–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
  }

  // ==================== –£–¢–ò–õ–ò–¢–´ ====================
  function generateRequestId() {
    return `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;
  }

  function notifyAppReady() {
    dispatchAppEvent('extension-ready', {
      connected: state.isConnected,
      extensionId: state.extensionId
    });
  }

  function notifyConnectionStatus(connected) {
    dispatchAppEvent('extension-connection-status', { connected });
  }

  function dispatchAppEvent(eventName, data) {
    const event = new CustomEvent(`hr-app-${eventName}`, {
      detail: data,
      bubbles: true,
      cancelable: true
    });
    window.dispatchEvent(event);
  }

  function showNotification(title, message) {
    if (Notification.permission === 'granted') {
      new Notification(title, {
        body: message,
        icon: '/logo192.png'
      });
    }
  }

  function processQueuedMessages() {
    if (state.messageQueue.length === 0) return;
    
    console.log(`Processing ${state.messageQueue.length} queued messages`);
    
    const queue = [...state.messageQueue];
    state.messageQueue = [];
    
    queue.forEach(({ message, resolve, reject }) => {
      sendToExtension(message).then(resolve).catch(reject);
    });
  }

  // ==================== –ú–ï–¢–û–î–´ –î–õ–Ø –†–ê–ó–†–ê–ë–û–¢–ö–ò ====================
  if (process.env.NODE_ENV === 'development') {
    window.HRAssistantExtension.debug = {
      getState: () => state,
      getPendingRequests: () => Array.from(state.pendingRequests.keys()),
      getQueueLength: () => state.messageQueue.length,
      forceReconnect: () => {
        state.isConnected = false;
        checkConnection();
      },
      simulateMessage: (type, data) => {
        handleExtensionEvent(type, data);
      },
      clearQueue: () => {
        state.messageQueue = [];
      }
    };
  }

  // ==================== –û–ß–ò–°–¢–ö–ê –ü–†–ò –í–´–ì–†–£–ó–ö–ï ====================
  window.addEventListener('beforeunload', () => {
    if (state.reconnectInterval) {
      clearInterval(state.reconnectInterval);
    }
    
    // –û—Ç–º–µ–Ω—è–µ–º –≤—Å–µ pending –∑–∞–ø—Ä–æ—Å—ã
    state.pendingRequests.forEach((request) => {
      request.reject(new Error('Page unloading'));
    });
    state.pendingRequests.clear();
  });

  // ==================== –ò–ù–™–ï–ö–¶–ò–Ø –°–¢–ò–õ–ï–ô –î–õ–Ø –£–í–ï–î–û–ú–õ–ï–ù–ò–ô ====================
  function injectStyles() {
    const style = document.createElement('style');
    style.textContent = `
      .hr-extension-notification {
        position: fixed;
        top: 20px;
        right: 20px;
        background: white;
        border: 1px solid #e5e7eb;
        border-radius: 8px;
        padding: 16px;
        box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1);
        z-index: 999999;
        max-width: 350px;
        animation: slideIn 0.3s ease-out;
      }
      
      @keyframes slideIn {
        from {
          transform: translateX(400px);
          opacity: 0;
        }
        to {
          transform: translateX(0);
          opacity: 1;
        }
      }
      
      .hr-extension-notification.error {
        border-color: #ef4444;
        background: #fee;
      }
      
      .hr-extension-notification.success {
        border-color: #10b981;
        background: #efe;
      }
      
      .hr-extension-notification.warning {
        border-color: #f59e0b;
        background: #fef3c7;
      }
    `;
    document.head.appendChild(style);
  }

  // ==================== –ó–ê–ü–£–°–ö ====================
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
  
  injectStyles();

})();
